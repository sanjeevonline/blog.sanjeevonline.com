<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sanjeev Kumar</title>
    <atom:link href="http://blog.sanjeevonline.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://blog.sanjeevonline.com</link>
    <description>The rootless wanderer</description>
    <pubDate>Fri, 12 Dec 2014 01:00:00 +0630</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Linked data based integration</title>
      <link>http://blog.sanjeevonline.com/articles/2014-12-12-Linked-Data-Based-Integration/</link>
      <pubDate>Fri, 12 Dec 2014 01:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2014-12-12-Linked-Data-Based-Integration/</guid>
      <author></author>
      <description>&lt;p&gt;Recently I was involved in a study to evaluate how the semantic web space is evolving and how can we leverage these new technology trends to power our integration architecture. Linked data is one of the many building blocks of semantic web that I found interesting and  that I believe has a potential to be used as a key integration technology in future. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here is a deck that I put together to discuss and syndicate the approach and concept with other architects in the Firm and to generate some interest in this area. This was a talk-through deck so readers might need a little more context to understand everything mentioned in it. At Broader level it might still make sense though.&lt;/p&gt;
&lt;iframe src=&quot;https://docs.google.com/file/d/0B56Wf8mnIbkvQ08yQ2otTUs3bkU/preview&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/iframe&gt;
</description>
    </item>
    <item>
      <title>Things our kids will probably never relate to</title>
      <link>http://blog.sanjeevonline.com/articles/2014-12-03-Things-Our-Kids-Will-Probably-Never-Relate-To/</link>
      <pubDate>Tue, 02 Dec 2014 01:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2014-12-03-Things-Our-Kids-Will-Probably-Never-Relate-To/</guid>
      <author></author>
      <description>&lt;p&gt;Today morning while Ranit and I were on our way to Ranit’s bus stop, he was telling about how disgusting it was to see cow dung lying around in a farm house that he visited with his classmates sometime back during a school trip. He couldn’t make sense of people making cow dung cakes with bare hands. That made me realize how the time has changed and how much fun it used to be for me when I was his age doing the same things that he finds disgusting.&lt;/p&gt;
&lt;h3 id=&quot;flashback-to-late-1980s-&quot;&gt;Flashback to late 1980s:&lt;/h3&gt;
&lt;p&gt;It was a nice sunny day and I was at my maternal grandmothers house in a village called “Pandori Bhainsa Di” which is about 15 KM from the nearest town Dinanagar in Punjab. &lt;/p&gt;
&lt;p&gt;Naani(Grandmother) was preparing for some guests or for some festival that was around the corner. I don’t remember the exact occasion but what it meant for us was that entire house needed to be cleaned, sanitised and decorated. It was a &lt;a href=&quot;https://www.google.co.in/search?q=kachha+house&amp;amp;espv=2&amp;amp;biw=1622&amp;amp;bih=892&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ei=Hd5-VPTBA4y9uATyzYLgAQ&amp;amp;ved=0CAYQ_AUoAQ&quot;&gt;kachha house&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;First step of the preparation was to gather a lot of fresh cow dung and bring it home and it meant going to people’s houses in the neighbourhood and collect hot &amp;amp; fresh cow dung from their cattel sheds. It felt like a social trip to everyones house. Next step was to add a little water in this collection of cow dung and mix it up with hands or feet until everything mixes up perfectly and a uniform paste is ready. This was followed up with pasting of the paste on entire kachha floor of the house.&lt;/p&gt;
&lt;p&gt;The paste dried out in an hour and the house started looking as good as new. It was so much fun doing all that and being part of this sanitising process. &lt;/p&gt;
&lt;h3 id=&quot;another-incident-from-around-the-same-time-&quot;&gt;Another incident from around the same time:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.sanjeevonline.com/articles/2014-12-03-Things-Our-Kids-Will-Probably-Never-Relate-To/Chullah.JPG&quot; alt=&quot;image-right&quot;&gt;&lt;/p&gt;
&lt;p&gt;I was hungry and wanted something to eat but the &lt;a href=&quot;https://www.google.co.in/search?q=chullah&amp;amp;espv=2&amp;amp;biw=1622&amp;amp;bih=892&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ei=SPR-VLfsM4KbuQSHxoKIAw&amp;amp;ved=0CAYQ_AUoAQ&quot;&gt;Chullah&lt;/a&gt; was not setup for cooking yet. On repeated requests, my granny asked me to get some fire from the neighbours and some dry cow dung cakes from the store on the roof. &lt;/p&gt;
&lt;p&gt;what!!! Yes thats right. Get fire from the neighbours was what she asked to me do. &lt;/p&gt;
&lt;p&gt;What could that possibly mean? and how was I suppose to get the fire from neighbour’s house? She handed me an iron &lt;a href=&quot;https://www.google.co.in/search?q=chullah&amp;amp;espv=2&amp;amp;biw=1622&amp;amp;bih=892&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ei=SPR-VLfsM4KbuQSHxoKIAw&amp;amp;ved=0CAYQ_AUoAQ#tbm=isch&amp;amp;q=chimta&quot;&gt;Chimta&lt;/a&gt; and told me that the neighbour will understand and that I am good to go. &lt;/p&gt;
&lt;p&gt;On my way I was still thinking about how would I ask for fire and what is naani (Granny) going to do with it. Nevertheless I went ahead and was shortly in our neighbour’s open kitchen where they were already cooking evening meal. I asked hesitantly “Maamy ji, Naani ne aag mangayi hai” (Naani has asked for some fire).  Maamy pulled me into her laps and showered me with a few kisses, took the Chimta from my hand and pulled a piece of burning wood from her chullah and gave it to me. She also asked me to be careful with it on my way back.&lt;/p&gt;
&lt;p&gt;Thats it. It was so simple. Everybody in the village understood the process and sharing everything including fire from Chullah was a custom being followed in the village since the time that nobody knew about.&lt;/p&gt;
&lt;p&gt;On further probing I learnt that during old times starting fire used to be a tough task and it used to take quite some time and effort to do it. So people used to take turns to start the fire and once it was on, every house in the village would share this fire with the neighbouring houses. &lt;/p&gt;
&lt;p&gt;Now in 1980s, even though matchsticks were available it was still more convenient to get a burning piece of wood from neighbour’s than to light a match and get the Chullah stuffed with cow dung cakes and wood hot for making chapattis.  &lt;/p&gt;
&lt;h3 id=&quot;back-to-present-&quot;&gt;Back to present:&lt;/h3&gt;
&lt;p&gt;At the bus stop, I narrated these two incidents to my son and by that time the school bus also arrived. I knew he had several followup questions but boarded the bus probably visualising what I had just told him.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How &quot;Paid leave&quot; and &quot;April fool&quot; were born</title>
      <link>http://blog.sanjeevonline.com/articles/2013-08-11-History-Is-Really-Interesting/</link>
      <pubDate>Sat, 10  Aug 2013 01:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2013-08-11-History-Is-Really-Interesting/</guid>
      <author></author>
      <description>&lt;p&gt;Here are couple of interesting historical facts that I learned today.&lt;/p&gt;
&lt;h3 id=&quot;paid-leaves&quot;&gt;Paid leaves&lt;/h3&gt;
&lt;p&gt;Just have a look at the calendar for the month of September 1752.
Google &lt;a href=&quot;https://www.google.co.in/search?q=September+1752+calendar&amp;amp;oq=September+1752+calendar&amp;amp;aqs=chrome.0.69i57j69i62.582j0&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&quot;&gt;September 1752 calendar&lt;/a&gt; &amp;amp; see for yourself.
You will notice, 11 days are simply missing from the month.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.sanjeevonline.com/articles/2013-08-11-History-Is-Really-Interesting/September-1752-Calendar.png&quot; alt=&quot;image-right&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here’s the explanation,&lt;/p&gt;
&lt;p&gt;This was the month during which England shifted from the Roman Julian Calendar to the Gregorian Calendar.
A Julian year was 11 days longer than a Gregorian year. So, the King of England decided and ordered 11 days to be wiped off the face of that particular month.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, the workers worked for 11 days less that month, but got paid for the whole month :-)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s how the concept of “Paid leave” was born and we still get 10 paid holidays every year. 10 and not 11 because 1752 was a leap year.&lt;/p&gt;
&lt;p&gt;Hail the King!!!!&lt;/p&gt;
&lt;h3 id=&quot;april-fool&quot;&gt;April fool&lt;/h3&gt;
&lt;p&gt;In the Roman Julian Calendar, April used to be the first month of the year; but the Gregorian Calendar observed January as the first month.&lt;/p&gt;
&lt;p&gt;Even after shifting to the Gregorian Calendar, many people refused to give up old traditions and continued celebrating 1st April as the New Year’s Day.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When simple orders didn’t work, the King finally issued a royal dictum; which stated that those who celebrated 1st April as the new year’s day would be labelled as fools.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From then on, 1st April became April Fool’s Day.&lt;/p&gt;
&lt;p&gt;History is really interesting!!!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New Date and Time API in Java8</title>
      <link>http://blog.sanjeevonline.com/articles/2013-05-27-New-Date-Time-API/</link>
      <pubDate>Tue, 28 May 2013 01:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2013-05-27-New-Date-Time-API/</guid>
      <author></author>
      <description>&lt;p&gt;At some point during your day-to-day coding experience with Java you might have realised that the existing Java date and time classes are poor, mutable, and have unpredictable performance. There has been a long-standing desire for a better date and time API based on the &lt;a href=&quot;http://joda-time.sourceforge.net/&quot;&gt;Joda-Time&lt;/a&gt; project. The good news is that the new API that got delivered with &lt;a href=&quot;http://openjdk.java.net/projects/jdk8/milestones#M6&quot;&gt;JDK8 milestone M6&lt;/a&gt; has a more intuitive design allowing code to better express its intent. The classes are immutable which aligns with the multi-core direction of the industry.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The code for this new API originated on Sourceforge and then migrated to &lt;a href=&quot;https://github.com/ThreeTen/threeten&quot;&gt;GitHub&lt;/a&gt; and further got integrated into OpenJDK. Eventually, &lt;a href=&quot;http://jcp.org/en/jsr/detail?id=310&quot;&gt;JSR-310&lt;/a&gt; has now simply become a part of the greater JDK8 JSR.&lt;/p&gt;
&lt;p&gt;Find more about it and JDK8 at &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://joda-time.sourceforge.net/&quot;&gt;Project Joda-Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/apps/mediawiki/threeten/index.php?title=ThreeTen&quot;&gt;Project ThreeTen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/news/2012/09/jsr310-java8&quot;&gt;InfoQ Post on the same&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/projects/jdk8/features&quot;&gt;JDK8 feature list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Re-platformig this blog to Wintersmith</title>
      <link>http://blog.sanjeevonline.com/articles/2013-05-25-Moving-Blog-To-Wintersmith/</link>
      <pubDate>Sat, 25 May 2013 01:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2013-05-25-Moving-Blog-To-Wintersmith/</guid>
      <author></author>
      <description>&lt;p&gt;After deferring it for more than a year, finally I decided to re-platform my blog. I had several viable options at hand like -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dynamic blogs&lt;ol&gt;
&lt;li&gt;Based on &lt;a href=&quot;http://www.enkiblog.com/&quot;&gt;Enki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Custom app that I can host on &lt;a href=&quot;http://blog.sanjeevonline.com/articles/2013-05-25-Moving-Blog-To-Wintersmith/www.heroku.com&quot;&gt;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java, Pyhton or go based app on &lt;a href=&quot;https://developers.google.com/appengine/&quot;&gt;Google App Engine&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Static blogs&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sanjeevonline.com/articles/2013-05-25-Moving-Blog-To-Wintersmith/sites.google.com&quot;&gt;Google sites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby based &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python based &lt;a href=&quot;http://hyde.github.io/&quot;&gt;Hyde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NodeJs based &lt;a href=&quot;http://jnordberg.github.io/wintersmith/&quot;&gt;Wintersmith&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;After careful analysis and googling about it yielded that for a simple site like this blog it would be a little too much of work to take the Dynamic blog route and sticking to a static site generator would be quicker, easier and maintainable. Besides static sites perform better and can be hosted anywhere.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;My earlier version of this blog was hosted on Google Sites for few years, which was good but there were some limitations to the kind of javascript, css, styles and themes that you can use and I wanted complete freedom. Ruby based Jekyll and Python based Hyde also looked promising but NodeJs based Wintersmith was simply impressive. Learning JavaScript and NodeJs being one of my personal goal for this year, it was the option that looked best.&lt;/p&gt;
&lt;p&gt;So here it is, my new blog based on Wintersmith.&lt;/p&gt;
&lt;p&gt;Some of the benefits of going with Wintersmith are -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Small and simple &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;codebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt; templates&lt;/li&gt;
&lt;li&gt;Nice &lt;a href=&quot;https://github.com/jnordberg/wintersmith/wiki/Plugins&quot;&gt;plugin&lt;/a&gt; system&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore.js&lt;/a&gt; which is great when working with templates&lt;/li&gt;
&lt;li&gt;Being a Mac user it was fairly easy to setup it up and I was able to get it up and running in few minutes&lt;/li&gt;
&lt;li&gt;I can continue to use my favourite &lt;a href=&quot;http://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; in my favourite &lt;a href=&quot;http://mouapp.com/&quot;&gt;Mou&lt;/a&gt; editor to write new posts&lt;/li&gt;
&lt;li&gt;I spend a lot of time on Github anyways so having &lt;a href=&quot;https://github.com/sanjeevonline/sanjeevonline.com&quot;&gt;my site’s code&lt;/a&gt; and generated site on Git itself is comforting&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>High school reunion</title>
      <link>http://blog.sanjeevonline.com/articles/2013-05-19-High-School-Reunion/</link>
      <pubDate>Sun, 19 May 2013 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2013-05-19-High-School-Reunion/</guid>
      <author></author>
      <description>&lt;p&gt;It was pleasure meeting childhood friends from school today after 18 years.&lt;/p&gt;
&lt;p&gt;We were expecting at least 10 of our 95 batch mates of KV1 Hindon but only 6 of us could make it for the first reunion. Nevertheless, it was quite a fun and we all had a blast.&lt;/p&gt;
&lt;p&gt;After reintroducing ourselves to each other, we were in back-to-school mode in no time and it was fun after that. We gossiped about everyone who was not around, discussed our school time heartbreaks, affairs, who-was-hot-who-was-not and what not. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We all managed to finish a few pitchers of Kingfisher while these intresting conversations were on. It was all heart-to-heart conversations.. no polishing and no pretensions whatsoever.. Just like how we used to do it during our school days.&lt;/p&gt;
&lt;p&gt;I am looking forward to many more such reunions and much more participation from my childhood buddies.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.sanjeevonline.com/articles/2013-05-19-High-School-Reunion/HighSchoolReunion.jpg&quot; alt=&quot;High School Reunion&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Improving code quality in agile teams</title>
      <link>http://blog.sanjeevonline.com/articles/2012-11-21-Code-Quality-Agile-Teams/</link>
      <pubDate>Wed, 21 Nov 2012 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2012-11-21-Code-Quality-Agile-Teams/</guid>
      <author></author>
      <description>&lt;p&gt;Here are a few quick pointers that have worked for me to improve code quality in agile teams and to deliver stories completely without leaving bugs behind.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve how retrospectives are done so they can effectively detect and address these kinds of quality problems&lt;/li&gt;
&lt;li&gt;If there are quality differences in the code written by different team members, have the better programmers find ways to raise the quality of code written by others.&lt;/li&gt;
&lt;li&gt;Focus on defect prevention, not just detection. Tools that can help are:&lt;ul&gt;
&lt;li&gt;code inspections&lt;/li&gt;
&lt;li&gt;checklists&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use pair-programming to improve knowledge sharing within the team. It seems expensive but mostly it is worth it.&lt;/li&gt;
&lt;li&gt;Begin regular use of static or dynamic code analysis tools.&lt;/li&gt;
&lt;li&gt;Implement continous integration tools to proactively detect and prevent code quality issues&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Java7 updates</title>
      <link>http://blog.sanjeevonline.com/articles/2012-05-11-Java7-Updates/</link>
      <pubDate>Fri, 11 May 2012 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2012-05-11-Java7-Updates/</guid>
      <author></author>
      <description>&lt;p&gt;It has been quite sometime that Java 7 got released with plenty of new features and enhancements that shall interest Java developer community. Following sections of this page cover some of these changes with examples. 
Contents&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Strings in switch statements&lt;/li&gt;
&lt;li&gt;The diamond operator “&amp;lt;&amp;gt;”&lt;/li&gt;
&lt;li&gt;Handling more than one type of exception&lt;/li&gt;
&lt;li&gt;Re-throwing exceptions with more inclusive type checking&lt;/li&gt;
&lt;li&gt;The try-with-resources statement&lt;/li&gt;
&lt;li&gt;Numeric literals with underscores&lt;/li&gt;
&lt;li&gt;Binary literals&lt;/li&gt;
&lt;li&gt;Fork and Join&lt;/li&gt;
&lt;li&gt;Supporting dynamism&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Strings in switch statements&lt;/h3&gt;

&lt;p&gt;In the JDK 7 release, you can use a String object in the expression of a switch statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public String getTypeOfDayWithSwitchStatement(String dayOfWeekArg) {
     String typeOfDay;
     switch (dayOfWeekArg) {
         case &amp;quot;Monday&amp;quot;:
            typeOfDay = &amp;quot;Start of work week&amp;quot;;
             break;
         case &amp;quot;Tuesday&amp;quot;:
         case &amp;quot;Wednesday&amp;quot;:
         case &amp;quot;Thursday&amp;quot;:
            typeOfDay = &amp;quot;Midweek&amp;quot;;
             break;
         case &amp;quot;Friday&amp;quot;:
             typeOfDay = &amp;quot;End of work week&amp;quot;;
             break;
         case &amp;quot;Saturday&amp;quot;:
         case &amp;quot;Sunday&amp;quot;:
            typeOfDay = &amp;quot;Weekend&amp;quot;;
             break;
        default:
            throw new IllegalArgumentException(&amp;quot;Invalid day of the week: &amp;quot; + dayOfWeekArg);
     }
     return typeOfDay;
}&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;The diamond operator “&amp;lt;&amp;gt;”&lt;/h3&gt;

&lt;p&gt;You can replace the type arguments required to invoke the constructor of a generic class with an empty set of type parameters (&amp;lt;&amp;gt;) as long as the compiler can infer the type arguments from the context. This pair of angle brackets is informally called the diamond.&lt;/p&gt;
&lt;p&gt;For example, consider the following variable declaration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; myMap = new HashMap&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Java SE 7, you can substitute the parameterized type of the constructor with an empty set of type parameters (&amp;lt;&amp;gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; myMap = new HashMap&amp;lt;&amp;gt;();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Java SE 7 supports limited type inference for generic instance creation; you can only use type inference if the parameterized type of the constructor is obvious from the context. For example, the following example does not compile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
list.add(&amp;quot;A&amp;quot;);
list.addAll(new ArrayList&amp;lt;&amp;gt;()); // Statement should fail since addAll expects Collection&amp;lt;? extends String&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In comparison, the following example compiles:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;? extends String&amp;gt; list2 = new ArrayList&amp;lt;&amp;gt;();
list.addAll(list2);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: The diamond often works in method calls; however, it is suggested that you use the diamond primarily for variable declarations.&lt;/p&gt;
&lt;h3&gt;Handling more than one type of exception&lt;/h3&gt;

&lt;p&gt;In Java SE 7 and later, a single catch block can handle more than one type of exception. Consider the following example, which contains duplicate code in each of the catch blocks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//Prior to Java 7
catch (IOException ex) {
 logger.log(ex);
 throw ex;
catch (SQLException ex) {
 logger.log(ex);
 throw ex;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In releases prior to Java SE 7, it is difficult to create a common method to eliminate the duplicated code because the variable ex has different types.&lt;/p&gt;
&lt;p&gt;The following example, which is valid in Java SE 7 and later, eliminates the duplicated code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;catch (IOException|SQLException ex) { // java 7 handling more than one type of exception
    logger.log(ex);
    throw ex;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The catch clause specifies the types of exceptions that the block can handle, and each exception type is separated with a vertical bar (|). Some other advantages apart from syntactical improvement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bytecode generated by compiling a catch block that handles multiple exception types will be smaller (and thus superior) than compiling many catch blocks that handle only one exception type each. &lt;/li&gt;
&lt;li&gt;A catch block that handles multiple exception types creates no duplication in the bytecode generated by the compiler; the bytecode has no replication of exception handlers. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: If a catch block handles more than one exception type, then the catch parameter is implicitly final. In this example, the catch parameter ex is final and therefore you cannot assign any values to it within the catch block.&lt;/p&gt;
&lt;h3&gt;Re-throwing exceptions with more inclusive type checking&lt;/h3&gt;

&lt;p&gt;The Java SE 7 compiler performs more precise analysis of rethrown exceptions than earlier releases of Java SE. This enables you to specify more specific exception types in the throws clause of a method declaration.&lt;/p&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static class FirstException extends Exception { }
  static class SecondException extends Exception { }

  public void rethrowException(String exceptionName) throws Exception {
    try {
          if (exceptionName.equals(&amp;quot;First&amp;quot;)) {
            throw new FirstException();
          } else {
            throw new SecondException();
          }
    } catch (Exception e) {
          throw e;
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This examples’s try block could throw either FirstException or SecondException. Suppose you want to specify these exception types in the throws clause of the rethrowException method declaration. In releases prior to Java SE 7, you cannot do so. Because the exception parameter of the catch clause, e, is type Exception, and the catch block rethrows the exception parameter e, you can only specify the exception type Exception in the throws clause of the rethrowException method declaration.&lt;/p&gt;
&lt;p&gt;However, in Java SE 7, you can specify the exception types FirstException and SecondException in the throws clause in the rethrowException method declaration. The Java SE 7 compiler can determine that the exception thrown by the statement throw e must have come from the try block, and the only exceptions thrown by the try block can be FirstException and SecondException. Even though the exception parameter of the catch clause, e, is type Exception, the compiler can determine that it is an instance of either FirstException or SecondException:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void rethrowException(String exceptionName) throws FirstException, SecondException {
    try {
          // ...
    }
    catch (Exception e) {
          throw e;
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This analysis is disabled if the catch parameter is assigned to another value in the catch block. However, if the catch parameter is assigned to another value, you must specify the exception type Exception in the throws clause of the method declaration.&lt;/p&gt;
&lt;p&gt;In detail, in Java SE 7 and later, when you declare one or more exception types in a catch clause, and rethrow the exception handled by this catch block, the compiler verifies that the type of the rethrown exception meets the following conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The try block is able to throw it.&lt;/li&gt;
&lt;li&gt;There are no other preceding catch blocks that can handle it.&lt;/li&gt;
&lt;li&gt;It is a subtype or supertype of one of the catch clause’s exception parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Java SE 7 compiler allows you to specify the exception types FirstException and SecondException in the throws clause in the rethrowException method declaration because you can rethrow an exception that is a supertype of any of the types declared in the throws.&lt;/p&gt;
&lt;p&gt;In releases prior to Java SE 7, you cannot throw an exception that is a supertype of one of the catch clause’s exception parameters. A compiler from a release prior to Java SE 7 generates the error, “unreported exception Exception; must be caught or declared to be thrown” at the statement throw e. The compiler checks if the type of the exception thrown is assignable to any of the types declared in the throws clause of the rethrowException method declaration. However, the type of the catch parameter e is Exception, which is a supertype, not a subtype, of FirstException andSecondException.&lt;/p&gt;
&lt;h3&gt;The try-with-resources statement&lt;/h3&gt;

&lt;p&gt;The try-with-resources statement is a try statement that declares one or more resources. A resource is as an object that must be closed after the program is finished with it. The try-with-resources statement ensures that each resource is closed at the end of the statement. Any object that implements java.lang.AutoCloseable, which includes all objects which implement java.io.Closeable, can be used as a resource.&lt;/p&gt;
&lt;p&gt;The following example reads the first line from a file. It uses an instance of BufferedReader to read data from the file. BufferedReader is a resource that must be closed after the program is finished with it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Java 7 Code
static String readFirstLineFromFile(String path) throws IOException { 
      try (BufferedReader br = new BufferedReader(new FileReader(path))) {
        return br.readLine();
      }//no finally block required as resources will be closed automatically
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the resource declared in the try-with-resources statement is a BufferedReader. The declaration statement appears within parentheses immediately after the try keyword. The class BufferedReader, in Java SE 7 and later, implements the interface java.lang.AutoCloseable. Because the BufferedReader instance is declared in a try-with-resource statement, it will be closed regardless of whether the try statement completes normally or abruptly (as a result of the method BufferedReader.readLine throwing an IOException).&lt;/p&gt;
&lt;p&gt;Prior to Java SE 7, you can use a finally block to ensure that a resource is closed regardless of whether the whether the try statement completes normally or abruptly. The following example uses a finally block instead of a try-with-resources statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//Before Java 7
static String readFirstLineFromFileWithFinallyBlock(String path) throws IOException {
  BufferedReader br = new BufferedReader(new FileReader(path));
    try {
    return br.readLine();
    } finally { 
    if (br != null) br.close();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may declare one or more resources in a try-with-resources statement.&lt;/p&gt;
&lt;p&gt;Note: A try-with-resources statement can still have catch and finally blocks just like an ordinary try statement. In a try-with-resources statement, any catch or finally block is run after the resources declared have been closed.&lt;/p&gt;
&lt;h3&gt;Numeric literals with underscores&lt;/h3&gt;

&lt;p&gt;In Java SE 7 and later, any number of underscore characters (_) can appear anywhere between digits in a numerical literal. This feature enables you, for example, to separate groups of digits in numeric literals, which can improve the readability of your code.&lt;/p&gt;
&lt;p&gt;You can place underscores only between digits; you cannot place underscores in the following places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At the beginning or end of a number&lt;/li&gt;
&lt;li&gt;Adjacent to a decimal point in a floating point literal&lt;/li&gt;
&lt;li&gt;Prior to an F or L suffix&lt;/li&gt;
&lt;li&gt;In positions where a string of digits is expected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following examples demonstrate valid and invalid underscore placements (which are highlighted) in numeric literals:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float pi1 = 3_.1415F;      // Invalid; cannot put underscores adjacent to a decimal point
float pi2 = 3._1415F;      // Invalid; cannot put underscores adjacent to a decimal point
long ssn= 999_99_9999_L; // Invalid; cannot put underscores prior to an L suffix

int x1 = _52;              // This is an identifier, not a numeric literal
int x2 = 5_2;              // OK (decimal literal)
int x3 = 52_;              // Invalid; cannot put underscores at the end of a literal
int x4 = 5_______2;        // OK (decimal literal)

int x5 = 0_x52;            // Invalid; cannot put underscores in the 0x radix prefix
int x6 = 0x_52;            // Invalid; cannot put underscores at the beginning of a number
int x7 = 0x5_2;            // OK (hexadecimal literal)
int x8 = 0x52_;            // Invalid; cannot put underscores at the end of a number

int x9 = 0_52;             // OK (octal literal)
int x10 = 05_2;            // OK (octal literal)
int x11 = 052_;            // Invalid; cannot put underscores at the end of a number&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Binary literals&lt;/h3&gt;

&lt;p&gt;In Java SE 7, the integral types (byte, short, int, and long) can also be expressed using the binary number system. To specify a binary literal, add the prefix 0b or 0B to the number. The following examples show binary literals:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// An 8-bit &amp;#39;byte&amp;#39; value:
byte aByte = (byte)0b00100001;

// A 16-bit &amp;#39;short&amp;#39; value:
short aShort = (short)0b1010000101000101;

// Some 32-bit &amp;#39;int&amp;#39; values:
int anInt1 = 0b10100001010001011010000101000101;
int anInt2 = 0b101;
int anInt3 = 0B101; // The B can be upper or lower case.

// A 64-bit &amp;#39;long&amp;#39; value. Note the &amp;quot;L&amp;quot; suffix:
long aLong = 0b1010000101000101101000010100010110100001010001011010000101000101L;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Fork and Join&lt;/h3&gt;

&lt;p&gt;The effective use of parallel cores in a Java program has always been a challenge. There were few home-grown frameworks that would distribute the work across multiple cores and then join them to return the result set. Java 7 has incorporated this feature as a Fork and Join framework.&lt;/p&gt;
&lt;p&gt;Basically the Fork-Join breaks the task at hand into mini-tasks until the mini-task is simple enough that it can be solved without further breakups. It’s like a divide-and-conquer algorithm. One important concept to note in this framework is that ideally no worker thread is idle. They implement a work-stealing algorithm in that idle workers “steal” the work from those workers who are busy.&lt;/p&gt;
&lt;p&gt;The core classes supporting the Fork-Join mechanism are ForkJoinPool and ForkJoinTask. The ForkJoinPool is basically a specialized implementation of ExecutorService implementing the work-stealing algorithm.&lt;/p&gt;
&lt;h3&gt;Supporting dynamism&lt;/h3&gt;

&lt;p&gt;Java is a statically typed language — the type checking of the variables, methods and return values is performed at compile time. The JVM executes this strongly-typed bytecode at runtime without having to worry about finding the type information.&lt;/p&gt;
&lt;p&gt;There’s another breed of typed languages — the dynamically typed languages. Ruby, Python and Clojure are in this category. The type information is unresolved until runtime in these languages. This is not possible in Java as it would not have any necessary type information.&lt;/p&gt;
&lt;p&gt;There is an increasing pressure on Java folks improvise running the dynamic languages efficiently. Although it is possible to run these languages on a JVM (using Reflection), it’s not without constraints and restrictions.&lt;/p&gt;
&lt;p&gt;In Java 7, a new feature called invokedynamic was introduced. This makes VM changes to incorporate non-Java language requirements. A new package, java.lang.invoke, consisting of classes such as MethodHandle, CallSite and others, has been created to extend the support of dynamic languages.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Evolution of Java</title>
      <link>http://blog.sanjeevonline.com/articles/2011-10-23-Evolution-Of-Java/</link>
      <pubDate>Fri, 23 Mar 2012 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2011-10-23-Evolution-Of-Java/</guid>
      <author></author>
      <description>&lt;p&gt;I thought it would be useful for java developers to understand how Java has evolved since its inception so that they are aware of what all capabilities they have access to when working with a particular version of Java.  Besides, it is always good to have knowledge about evolution of the technologies that you are working with. &lt;/p&gt;
&lt;iframe src=&quot;http://docs.google.com/presentation/d/1meFweDCpygd0aF_ECNBMSo0L11zn944hXczhbUEh_nI/embed?start=false&amp;loop=false&amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;500&quot;  allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;

</description>
    </item>
    <item>
      <title>Choosing the right collection</title>
      <link>http://blog.sanjeevonline.com/articles/2012-01-05-Choosing-The-Right-Collections/</link>
      <pubDate>Thu, 05 Jan 2012 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2012-01-05-Choosing-The-Right-Collections/</guid>
      <author></author>
      <description>&lt;p&gt;Here is a quick guide for selecting the proper implementation of a Set, List, or Map in your application. &lt;/p&gt;
&lt;p&gt;The best general purpose or ‘primary’ implementations are likely ArrayList, LinkedHashMap, and LinkedHashSet. Their overall performance is better, and you should use them unless you need a special feature provided by another implementation. That special feature is usually ordering or sorting.&lt;/p&gt;
&lt;p&gt;Here, “ordering” refers to the order of items returned by an Iterator, and “sorting” refers to sorting items according to &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html&quot;&gt;Comparable&lt;/a&gt; or &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html&quot;&gt;Comparator&lt;/a&gt;. &lt;/p&gt;
&lt;iframe width='100%' height='180' frameborder='0' src='http://docs.google.com/spreadsheet/pub?key=0Ap6Wf8mnIbkvdEI0LXZIN0V6c0JzcWxudTNsLWZBenc&amp;output=html&amp;widget=true'&gt;&lt;/iframe&gt;


&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Principal features of non-primary implementations :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HashMap has slightly better performance than LinkedHashMap&lt;/li&gt;
&lt;li&gt;HashSet has slightly better performance than LinkedHashSet&lt;/li&gt;
&lt;li&gt;TreeSet is ordered and sorted, but slow&lt;/li&gt;
&lt;li&gt;TreeMap is ordered and sorted, but slow&lt;/li&gt;
&lt;li&gt;LinkedList has fast adding to the start of the list, and fast deletion from the interior via iteration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Iteration order for above implementations :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HashSet - undefined&lt;/li&gt;
&lt;li&gt;HashMap - undefined&lt;/li&gt;
&lt;li&gt;LinkedHashSet - insertion order&lt;/li&gt;
&lt;li&gt;LinkedHashMap - insertion order of keys (by default), or ‘access order’&lt;/li&gt;
&lt;li&gt;ArrayList - insertion order&lt;/li&gt;
&lt;li&gt;LinkedList - insertion order&lt;/li&gt;
&lt;li&gt;TreeSet - ascending order, according to Comparable / Comparator&lt;/li&gt;
&lt;li&gt;TreeMap - ascending order of keys, according to Comparable / Comparator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For LinkedHashSet and LinkedHashMap, the re-insertion of an item does not affect insertion order.&lt;/p&gt;
&lt;p&gt;While being used in a Map or Set, these items must not change state (hence, it is recommended that these items be immutable objects):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keys of a Map&lt;/li&gt;
&lt;li&gt;items in a Set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sorting requires either that :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the stored items implement &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html&quot;&gt;Comparable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html&quot;&gt;Comparator&lt;/a&gt; for the stored objects be defined&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To retain the order of a ResultSet as specified in an ORDER BY clause, insert the records into a List or a LinkedHashMap.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Change default author name for JavaDocs in Eclipse</title>
      <link>http://blog.sanjeevonline.com/articles/2011-08-03-Changing-Default-Author-Eclipse/</link>
      <pubDate>Wed, 03  Aug 2011 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2011-08-03-Changing-Default-Author-Eclipse/</guid>
      <author></author>
      <description>&lt;p&gt;The auto generated Java docs at the class level picks the user name from the system user. This could result in weird author names in your code files as in an organization usernames are usually as per organizational naming conventions. For example my user name that I use to login is something like SK0012345 and you will agree that it wouldn’t look good as an author name in a Java file and might not make any sense to most other viewers of the code. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Test default author in JavaDocs
 * @author SK0012345
 */
public class TestClass {
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a quick way to change the default author name in your Eclipse projects. Simply edit your eclipse.ini file found in the root directory where you placed Eclipse. I have Eclipse at C:\devtools\development\eclipse, so my path would be C:\devtools\development\eclipse\eclipse.ini. Once editing this file add the following line and save.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-Duser.name=Sanjeev Kumar&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After saving restart Eclipse and when you do a JavaDoc comment and use the author attribute by typing @author and pressing enter on the autocomplete you will see something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Test default author in JavaDocs
 * @author Sanjeev Kumar
 */
public class TestClass {
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple yet useful. Happy coding!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Remote debugging in Eclipse</title>
      <link>http://blog.sanjeevonline.com/articles/2011-07-08-Remote-Debugging-Jboss/</link>
      <pubDate>Fri, 08 Jul 2011 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2011-07-08-Remote-Debugging-Jboss/</guid>
      <author></author>
      <description>&lt;p&gt;To debug your application on JBOSS server you would need to enable the debugging on your JBOSS application server. By default it is turned off. In order to set jboss app server to be running in debugging mode, you should uncomment following line in “jboss-5.1.0.GA/jboss/bin/run.conf”&lt;/p&gt;
&lt;p&gt;like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Sample JPDA settings for remote socket debugging
JAVA_OPTS=”$JAVA_OPTS -Xrunjdwp:transport=dt_socket,address=8787,serve &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once done you can configure your eclipse remote application debugger on port 8787 and start debugging your application.&lt;/p&gt;
&lt;p&gt;Happy debugging !!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Skip over certain classes when using Step Into(F5) in Eclipse’s debugger</title>
      <link>http://blog.sanjeevonline.com/articles/2011-06-01-Debugging-With-Eclipse/</link>
      <pubDate>Wed, 01 Jun 2011 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2011-06-01-Debugging-With-Eclipse/</guid>
      <author></author>
      <description>&lt;p&gt;Whenever I use the Step Into feature (F5) in Eclipse’s debugger, I’m mainly interested in stepping through code in my own classes, not the ones from external libraries or even Java classes.&lt;/p&gt;
&lt;p&gt;For example, there’s almost no reason to ever want to step into Spring’s code or proxy classes (other than to learn more about them or maybe debug a potential bug in Spring). And normally I’m not interested in Java util classes (eg. ArrayList). This also goes for Hibernate, Apache Commons, Google and many other external libraries.&lt;/p&gt;
&lt;p&gt;Fortunately, Eclipse makes it easy to specify which classes to skip by allowing step filters. This makes it easier to focus on your own code and also keeps your editor area clean since Eclipse won’t be opening classes in separate editors all the time.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Enable Step Filters&lt;/h3&gt;

&lt;p&gt;To use step filters, the first step is to enable it. Eclipse comes with some default filters so let’s start by enabling them all. This will filter all Java classes (ie. java.) and all Sun classes (ie. sun.).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to Window &amp;gt; Preferences &amp;gt; Java &amp;gt; Debug &amp;gt; Step Filtering.&lt;/li&gt;
&lt;li&gt;Select the option Use Step Filters.&lt;/li&gt;
&lt;li&gt;Click Select All to enable all the filters.&lt;/li&gt;
&lt;li&gt;Leave the other options below the filter list as-is.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s an example of what it should look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jO19t.jpg&quot; alt=&quot;Debug setting in eclipse&quot;&gt;&lt;/p&gt;
&lt;p&gt;NB: Even with step filters enabled, you can still set breakpoints within any of these classes (if you have the source) and Eclipse will still stop at the breakpoint. Step filtering only affects the way that Step Into works.&lt;/p&gt;
&lt;p&gt;Also note that Eclipse will still step into your classes if they’re called from the ignored classes. For example, when you call Collections.sort(List, Comparator) and pass your own Comparator implementation, Eclipse will not step into the sort code, but it will step into your Comparator when it’s called by the sort code.&lt;/p&gt;
&lt;p&gt;If you want to change this behaviour (ie. prevent Eclipse from stopping in your method), then deselect Step through filters. However, I’d recommend only doing this if you’ve tried out the default, because most times you’ll probably want to step through your own code.&lt;/p&gt;
&lt;h3&gt;The next step is to create some step filters of your own.&lt;/h3&gt;

&lt;p&gt;Once you’ve enabled step filters, all you have to do is add the classes you want to filter. Let’s assume that we want to ignore all classes from Spring, especially proxy classes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you’re not there already, go to Window &amp;gt; Preferences &amp;gt; Java &amp;gt; Debug &amp;gt; Step Filtering&lt;/li&gt;
&lt;li&gt;Click Add Filter… A dialog should appear prompting you to enter a pattern&lt;/li&gt;
&lt;li&gt;Enter a regular expression for the classes you want to filter in the Pattern to filter field then click Ok. In our example, enter org.springframework.* (see image below). It’s easier to specify the top level package name with an asterix at the end&lt;/li&gt;
&lt;li&gt;Add another filter with the pattern $Proxy* to skip over Spring proxy classes (eg. when using Spring Transactions)&lt;/li&gt;
&lt;li&gt;Click Ok on the Preferences dialog when you’re done&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s what the step filter pattern dialog should look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/2RWRS.jpg&quot; alt=&quot;Filter pattern dialog&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now when you use the debugger, you won’t be taken into Spring classes when you use Step Into (F5).&lt;/p&gt;
&lt;h3&gt;Some ideas for custom filters&lt;/h3&gt;

&lt;p&gt;In addition to the Spring classes, you might also want to consider adding the following common libraries to your step filters to make debugging easier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;org.apache.*&lt;/li&gt;
&lt;li&gt;org.hibernate.*&lt;/li&gt;
&lt;li&gt;com.google.*&lt;/li&gt;
&lt;li&gt;org.eclipse.*&lt;/li&gt;
&lt;li&gt;org.osgi.*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last two are especially useful if you’re doing Eclipse RCP and/or OSGi development.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Implementing Comparable and understanding compareTo</title>
      <link>http://blog.sanjeevonline.com/articles/2011-05-05-Understanding-Comparable/</link>
      <pubDate>Sun, 20 Mar 2011 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2011-05-05-Understanding-Comparable/</guid>
      <author></author>
      <description>&lt;h3&gt;Implementing Comparable&lt;/h3&gt;

&lt;p&gt;Implementing Comparable allows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calling Collections.sort and Collections.binarySearch.&lt;/li&gt;
&lt;li&gt;Calling Arrays.sort and Arrays.binarySearch.&lt;/li&gt;
&lt;li&gt;Using objects as keys in a TreeMap.&lt;/li&gt;
&lt;li&gt;Using objects as elements in a TreeSet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Understanding compareTo&lt;/h3&gt;

&lt;p&gt;The compareTo() method is the sole member of Comparable interface. It provides a means of fully ordering objects. For a concrete comparable implementation class to work well, the compareTo() implementation needs to satisfy the certain conditions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Anti Commutation :  x.compareTo(y) is the opposite sign of y.compareTo(x)&lt;/li&gt;
&lt;li&gt;Exception Symmetry : x.compareTo(y) throws exactly the same exceptions as y.compareTo(x)&lt;/li&gt;
&lt;li&gt;Transitivity :  &lt;ol&gt;
&lt;li&gt;if x.compareTo(y) &amp;gt; 0 and y.compareTo(z) &amp;gt; 0, then x.compareTo(z) &amp;gt; 0  (and same for less than)&lt;/li&gt;
&lt;li&gt;if x.compareTo(y)==0, then x.compareTo(z) has the same sign as y.compareTo(z)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;consistency with equals : It is highly recommended, but not required : x.compareTo(y) == 0, if and only if x.equals(y) ; consistency with equals is required for ensuring sorted collections (such as TreeSet) are well-behaved.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Things to remember while implementing compareTo()&lt;/h3&gt;

&lt;p&gt;Compare the various types of fields as follows :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Numeric primitive : use &amp;lt; and &amp;gt;. There is an exception to this rule: float and double primitives should be compared using Float.compare(float, float) and Double.compare(double, double). This avoids problems associated with special border values.&lt;/li&gt;
&lt;li&gt;Boolean primitive :  use tests of the form (x &amp;amp;&amp;amp; !y)&lt;/li&gt;
&lt;li&gt;Object : use compareTo. (Note that possibly-null fields present a problem : while x.equals(null) returns false, x.compareTo(null) will always throw a NullPointerException)&lt;/li&gt;
&lt;li&gt;Type-safe enumeration : use compareTo, like any Object&lt;/li&gt;
&lt;li&gt;collection or array : Comparable does not seem to be intended for these kinds of fields. For example, List, Map and Set do not implement Comparable. As well, some collections have no definite order of iteration, so doing an element-by-element comparison cannot be meaningful in those cases.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Comparable implementations in JDK&lt;/h3&gt;

&lt;p&gt;All primitive wrapper classes like Integer, Long, Float, Double, Boolean and many more implement Comparable.  &lt;/p&gt;
&lt;h3&gt;Hot tips&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;One can greatly increase the performance of compareTo by comparing first on items which are most likely to differ.&lt;/li&gt;
&lt;li&gt;Avoid instanceof in methods that override or implement Object.equals(), Comparable.compareTo()&lt;/li&gt;
&lt;li&gt;If the task is to perform a sort of items which are stored in a relational database, then it is usually much preferred to let the database perform the sort using the ORDER BY clause, rather than in code.&lt;/li&gt;
&lt;li&gt;An alternative to implementing Comparable is passing Comparator objects as parameters. Be aware that if a Comparator compares only one of several significant fields, then the Comparator is very likely not synchronized with equals.&lt;/li&gt;
&lt;li&gt;When a class extends a concrete Comparable class and adds a significant field, a correct implementation of compareTo cannot be constructed. The only alternative is to use composition instead of inheritance. (A similar situation holds true for equals. See Effective Java for more information.)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>Eclipse keyboard shortcuts</title>
      <link>http://blog.sanjeevonline.com/articles/2011-03-20-Eclipse-Keyboard-Shortcuts/</link>
      <pubDate>Sun, 20 Mar 2011 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2011-03-20-Eclipse-Keyboard-Shortcuts/</guid>
      <author></author>
      <description>&lt;p&gt;These keybindings are made by Carsten Ullrich (cullrich located-at activemath.org) and are released under the Creative Commons Attribution-ShareAlike 2.5 License (&lt;a href=&quot;http://creativecommons.org/licenses/by-sa/2.5/&quot;&gt;http://creativecommons.org/licenses/by-sa/2.5/&lt;/a&gt;).&lt;/p&gt;
&lt;iframe width='100%' height='400' frameborder='0' src='http://docs.google.com/spreadsheet/pub?key=0Ag_VihEyeaIudF9sREdTVi1XWmxGN0RFcXNCTFJSS2c&amp;single=true&amp;gid=0&amp;output=html&amp;widget=true'&gt;&lt;/iframe&gt;
</description>
    </item>
    <item>
      <title>Using Eclipse effectively</title>
      <link>http://blog.sanjeevonline.com/articles/2011-03-15-Using-Eclipse-Effectively/</link>
      <pubDate>Tue, 15 Mar 2011 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2011-03-15-Using-Eclipse-Effectively/</guid>
      <author></author>
      <description>&lt;p&gt;To ensure that the code that you write is always clean and complaint to your project specific coding standards and guidelines, it is important that you configure your eclipse to effectively use its compiler settings, Formatter, CheckStyle and related built in features. Most developers wouldn’t bother to do so but trust me that it is huge time saver in long run and shall always keep your code quality under check.&lt;/p&gt;
&lt;p&gt;Following spread sheet has the configuration that we use in our current projects. You can customize these settings according to your development standards and needs. &lt;/p&gt;
&lt;iframe width='100%' height='500' frameborder='0' src='http://docs.google.com/spreadsheet/pub?key=0Ap6Wf8mnIbkvdFZnZTNweGxOd2haZnpyN1NPSXNZNkE&amp;output=html&amp;widget=true'&gt;&lt;/iframe&gt;

&lt;p&gt;Also ideally your Eclipse should be configured with your “code formatter” and “CheckStyle” XML configurations. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To start with you can simply import these xmls that are attached to this page to enable code formatting and checkstyle for your code. You can get more detail on CheckStyle at &lt;a href=&quot;http://checkstyle.sourceforge.net/&quot;&gt;http://checkstyle.sourceforge.net/&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Links to configure the CheckStyle, Formatter and compiler setting can be found under your Eclipse—&amp;gt;Preferences menu.&lt;/p&gt;
&lt;p&gt;Here the checkstyle and formatter that I  use on my projects &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.google.com/file/d/0B56Wf8mnIbkvVm9saFEwaHE0UWM/edit?usp=sharing&quot;&gt;Java code formatter configuration XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.google.com/file/d/0B56Wf8mnIbkvX0pualpCWnRpc0E/edit?usp=sharing&quot;&gt;Checkstyle configuration XML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Troubleshooting eclipse issues</title>
      <link>http://blog.sanjeevonline.com/articles/2011-02-25-Troubleshooting-Eclipse-Issues/</link>
      <pubDate>Fri, 25 Feb 2011 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2011-02-25-Troubleshooting-Eclipse-Issues/</guid>
      <author></author>
      <description>&lt;p&gt;Following are some tips that shall help you in avoiding potential issues and for being a little more productive while working with eclipse.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Avoid installation problems&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;  Never install a new version of Eclipse on top of an older version. Rename the old one first to move it out of the way, and let the new version be unpacked in a clean directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Recovering your messed up workspace&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;  Corrupted workspace is a common occurrence and troublemaker for many developers. So If your Eclipse installation has startup errors or a corrupted configuration, it might be time to get a fresh start. Start Eclipse with the –clean option, and all cached framework and runtime data will be cleared out. This often helps fix plug-in issues and improve general stability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Increase the memory allocation&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;  With new plugins getting added to the core eclipse functionality and the need to use additional third party plugins, the memory requirements for your eclipse workspace increases. The default memory allocation configured in eclipse is not enough for most J2ee development projects and that causes a sluggish response from you eclipse. If you get Out of Memory errors or sluggish response, you may have to increase the defaults that are set in eclipse.ini file in the Eclipse installation directory. In particular, if you get an error about “PermGen” memory (permanent generation), add this line at the end and restart Eclipse: -&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  XX:MaxPermSize=256m &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  Use the lowest memory settings that work and perform well for your mix of projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Side by side editing&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;  By dragging editors, you can show two files side by side. You can also edit two portions of the same file by using the Window &amp;gt; New Editor command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Automatic code improvements&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;  Set up Eclipse to automatically format source code and organize imports on every save. Select Window &amp;gt; Preferences &amp;gt; Java Editor &amp;gt; Save Actions to enable these actions. This dialog also lets you configure actions like removing unnecessary casts or adding missing annotations. Configuring your eclipse with optimized Compiler, Formatter and CheckStyle settings is described in detail in the post Using Eclipse Effectively&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Keyboard shortcuts&lt;/b&gt;
  It is productive and convenient to use keyboard shortcuts for performing certain tasks in eclipse rather than looking for options to do the same in various navigation menus. For example looking up references of a variable, method or a class can be quickly achieved via shortcut Ctrl+Shift+g. For your reference I have included a list of the most important keyboard shortcuts in my post Eclipse Keyboard Shortcuts&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Best practices for threadsafe Singletons</title>
      <link>http://blog.sanjeevonline.com/articles/2011-01-15-Thread-Safe-Singletons/</link>
      <pubDate>Sat, 15 Jan 2011 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2011-01-15-Thread-Safe-Singletons/</guid>
      <author></author>
      <description>&lt;p&gt;A singleton class should be designed to ensures that there exists only one instance per application. Special care must be taken if your application is deployed on a clustered environment as in this case it is possible that multiple instance of your singleton class are available in your application.   &lt;/p&gt;
&lt;p&gt;Here are a few ways to create a thread safe singleton classes in your application. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;1. Lazy loading Singleton instance - Using Synchronized method or block&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class SingletonClass{
    private SingletonClass sc;
    private SingletonClass(){}

        public static SingletonClass getInstance(){
        synchronized(SingletonClass.class) {
          if (sc == null) {
              sc = new SingletonClass();
          } else {
             return sc;
          }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Issues&lt;/b&gt;:    The use of synchronized keyword in a singleton class means that only one thread will be executing the synchronized block at a time and all other threads would be waiting.&lt;/p&gt;
&lt;h3&gt;2. Early initialization Singleton - Using Static Member Variable&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class SingletonClass{
    private static sc = new SingletonClass();
    private SingletonClass(){}

    public static SingletonClass getInstance(){
        return sc;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach is also known as early initialization because we are creating the singleton instance at an early stage and not when the instance is actually needed by another class.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Issues&lt;/b&gt;: The use of static member variable means that this singleton instance will be created as soon as the class is loaded by any Classloader in JVM. &lt;/p&gt;
&lt;h3&gt;3. Singleton using Inner Classes&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class SingletonClass{
    private SingletonClass(){}
    private static class InstanceHolder{
        private static final SingletonClass INSTANCE = new SingletonClass(); 
    }
    public static SingletonClass getInstance(){
        return InstanceHolder.INSTANCE; //line1
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the instance is being created on demand and is also thread safe. The use of inner classes helps in the sense that the very first time singleton object is requested, the inner class is loaded by line1 and this loading of inner class causes the static member variable to be created and returned. Next time, the singleton member variable is requested causes the same static reference variable to be returned.&lt;/p&gt;
&lt;h3&gt;4. Singleton using enums&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public enum Singleton{
    INSTANCE;
    private int a;
    public int getA() {
        return a;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get a single instance of this enum one should use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Singleton.INSTANCE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get the value of member variable a, one should use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Singleton.INSTANCE.getA();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;In my experience using enums is the best way to implement Singleton design pattern in any Java application. It is thread safe and also provides lazy initialization.&lt;/b&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Overloading can be tricky</title>
      <link>http://blog.sanjeevonline.com/articles/2010-12-31-Tricky-Overloading/</link>
      <pubDate>Fri, 31 Dec 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-12-31-Tricky-Overloading/</guid>
      <author></author>
      <description>&lt;p&gt;Extra care must be taken while writing Overloading methods. The compiler decides which version of an overloaded method will be called based on declared compile-time type, not run-time type. For the case in which overloaded methods have the same number of arguments, the rules regarding this decision can sometimes be a bit tricky.&lt;/p&gt;
&lt;p&gt;If there may be confusion, you may simplify the design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use different method names, and avoid overloading altogether&lt;/li&gt;
&lt;li&gt;retain overloading, but ensure each method has a distinct number of arguments&lt;/li&gt;
&lt;li&gt;In addition, it is recommended that varargs not be used when a method is overloaded, since this makes it more difficult to determine which overload is being called.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Reminder : Overloading requires methods with distinct signatures. The signature of a method includes its name and the ordered list of its argument types. All other items appearing in a method header, such as exceptions, return type, final, and synchronized, do not contribute to a method’s signature. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Prefer using parameterized types over raw types</title>
      <link>http://blog.sanjeevonline.com/articles/2010-12-29-Prefer-Parameterized-Types/</link>
      <pubDate>Wed, 29 Dec 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-12-29-Prefer-Parameterized-Types/</guid>
      <author></author>
      <description>&lt;p&gt;When generics were introduced in JDK 1.5, raw types were retained only to maintain backwards compatibility with older versions of Java. Although using raw types is still possible, they should be avoided for following reasons :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they usually require casts&lt;/li&gt;
&lt;li&gt;they aren’t type safe, and some important kinds of errors will only appear at runtime&lt;/li&gt;
&lt;li&gt;they are less expressive, and don’t self-document in the same way as parameterized types&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Unless you are using a JDK version prior to 1.5 I don’t see a reason why you should not use parameterized types in your code.&lt;/p&gt;
&lt;p&gt;Happy coding !!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Prefer switch over if-else</title>
      <link>http://blog.sanjeevonline.com/articles/2010-12-28-Prefer-Switch-Over-IfElse/</link>
      <pubDate>Tue, 28 Dec 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-12-28-Prefer-Switch-Over-IfElse/</guid>
      <author></author>
      <description>&lt;p&gt;In most cases switch will be lighter and performs faster than an if/else ladder. The compiler is able to optimize switch statements into a lookup table and perform compile-time checking for literals when dealing with enumerations, so I’d suggest that it’s usually preferable to use switch over if/else if if you’re dealing with numeric or enum types in Java. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Exception handling guidelines/best practices</title>
      <link>http://blog.sanjeevonline.com/articles/2010-12-10-Exception-Handling/</link>
      <pubDate>Mon, 20 Dec 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-12-10-Exception-Handling/</guid>
      <author></author>
      <description>&lt;p&gt;Let’s review some basic exception design guidelines, summarized from Object Design: Roles, Responsibilities, and Collaborations (Rebecca Wirfs-Brock and Alan McKean, Addison-Wesley, 2003).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Don’t try to handle coding errors&lt;/b&gt;: Unless your software is required to take extraordinary measures in error scenarios, don’t spend a lot of time designing it to detect and recover from programming errors. In the case of an out-of-bounds array index, divide-by zero error, or any other programming error, the best strategy is to fail fast (and leave an audit trail of the problem that can be used to troubleshoot it).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Avoid declaring lots of exception classes&lt;/b&gt;: Create a new exception class only when you expect some handling of the code to take a significantly different action, based on the exception type. In my experience it is rarely the case and exception classes available in java API serve the purpose.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Recast lower-level exceptions to higher-level ones whenever you raise an abstraction level&lt;/b&gt;: Don’t let implementation details leak out of a method invocation as exceptions. Otherwise, your users might think your software is broken. When low-level exceptions percolate up to a high-level handler, there’s little context to assist the handler in making informed decisions or reporting conditions that are traceable to any obvious cause. Recasting an exception whenever you cross an abstraction boundary enables exception handlers higher up in the call chain to make more informed decisions. If you want to include a problem trace when recasting them, you can always create a chained exception. A chained exception provides added context and holds a reference to the original lower level exception. You can repeatedly chain exceptions.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Provide context along with an exception&lt;/b&gt;: What’s most important in exception handling is information that helps create an informed response. Exception classes hold information. You can design them to be packed with information in addition to the bare-bones stack trace information provided by default. You might include values of parameters that raised the exception, specific error text, or detailed information that could be useful to plan a recovery. When an exception occurs, it is important that all pertinent data be passed to the exception’s constructor. Such data is often critical for understanding and solving the problem, and can greatly reduce the time needed to find a solution.
The this reference is sometimes useful for this purpose, since toString is implicitly called. In addition, if you are defining exception classes yourself, you may even design your constructors to force the caller to pass the pertinent data.&lt;/p&gt;
&lt;p&gt;  Uninformative stack traces are very frustrating for the maintainer, and often inspire even the most well-tempered programmers to temporarily violate local community standards for obscenity.&lt;/p&gt;
&lt;p&gt;  Example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public final class RangeChecker {

/**
* Return &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; only if &amp;lt;code&amp;gt;aNumber&amp;lt;/code&amp;gt; is in the range
* &amp;lt;code&amp;gt;aLow..aHigh&amp;lt;/code&amp;gt; (inclusive).
*
* @param &amp;lt;code&amp;gt;aLow&amp;lt;/code&amp;gt; less than or equal to &amp;lt;code&amp;gt;aHigh&amp;lt;/code&amp;gt;.
*/
static public boolean isInRange( int aNumber, int aLow, int aHigh ){
  if (aLow &amp;gt; aHigh) {
    throw new IllegalArgumentException(&amp;quot;Low:&amp;quot; + aLow + &amp;quot; greater than High:&amp;quot; + aHigh);
  }
  return (aLow &amp;lt;= aNumber &amp;amp;&amp;amp; aNumber &amp;lt;= aHigh);
}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Handle exceptions as close to the problem as you can&lt;/b&gt;: As a first line of defense, consider the initial requestor. If the caller knows enough to perform a corrective action, you can rectify the condition on the spot. If you propagate an exception far away from the source, it can be difficult to trace the source. Often objects further away from the problem can’t make meaningful decisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use exceptions only to signal emergencies&lt;/b&gt;: Exceptions shouldn’t be raised to indicate normal branching conditions that will alter the flow in the calling code. For example, a find operation may return zero, one, or many objects, so I wouldn’t raise an exception in this case. Instead, I’d design my find() method to return a null object or an empty collection. A dropped database connection, on the other hand, is a real emergency. There’s nothing that can be done to continue as planned.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Don’t repeatedly re-throw the same exception&lt;/b&gt;: Although exceptions don’t cost anything until they’re raised, programs that frequently raise exceptions run more slowly.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Avoid empty catch blocks&lt;/b&gt;: It is usually a very bad idea to have an empty catch block because when the exception occurs, nothing happens, and the program fails for unknown reasons.&lt;/p&gt;
&lt;p&gt;  In general, when a exception occurs, it can be thrown up to the caller, or it can be caught in a catch block. When catching an exception, some options include :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   ** Inform the user (strongly recommended)
   ** Log the problem, using the application specific loggers or JDK logging services, or similar tool
   ** Send an email describing the problem to an administrator&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  Deciding what exactly to do seems to depend on the nature of the problem. If there is an actual bug in the program - a defect that needs to be fixed - then one might do all three of the above. In this case, the end user should likely be shown a generic “Sorry, we goofed” message, not a stack trace. It is usually considered bad form to display a stack trace to a non-technical end user, or if exposing a stack trace may be a security risk.&lt;/p&gt;
&lt;p&gt;  If the exception does not represent a bug, then different behavior may be appropriate. For example, if a problem with user input is detected and an exception is thrown as a result, then merely informing the user of the problem might be all that is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Exception translation&lt;/b&gt;: Occasionally, it is appropriate to translate one type of exception into another.&lt;/p&gt;
&lt;p&gt;  The data layer, for example, can profit from this technique. Here, the data layer seeks to hide almost all of its implementation details from other parts of the program. It even seeks to hide the basic persistence mechanism - whether or not a database or an ad hoc file scheme is used, for example.&lt;/p&gt;
&lt;p&gt;  However, every persistence style has specific exceptions - SQLException for databases,  and IOException for files, for example. If the rest of the program is to remain truly ignorant of the persistence mechanism, then these exceptions cannot be allowed to propagate outside the data layer, and must be translated into some higher level abstraction - DataAccessException, say.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use template for repeated try-catch&lt;/b&gt;: Java’s try-catch blocks are particularly common when using APIs which give an important role to checked exceptions (such as SQLException in JDBC). When using such an API, many published examples simply repeat the same try-catch code structure whenever necessary. However, it is simple to eliminate such code repetition using the template method pattern. The idea is to define the structure of the try-catch block in one place, in an abstract base class (ABC). Such an ABC is then extended whenever that particular try-catch block is needed. The concrete implementation of such an ABC will often have simple, “straight line” code.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Avoiding null pointer exceptions</title>
      <link>http://blog.sanjeevonline.com/articles/2010-11-27-Avoiding-Null-Pointer-Exceptions/</link>
      <pubDate>Sat, 27 Nov 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-11-27-Avoiding-Null-Pointer-Exceptions/</guid>
      <author></author>
      <description>&lt;p&gt;Null pointer exceptions(NPE) are the undoubtedly the most common and most annoying errors. In most cases I have observed that it could have been avoided by simply sticking to some best coding practices while writing code. Here is an example of a potential NPE.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// BAD CODE
private Boolean isExpired(final StatusEnum status) {
    if (status.equals(StatusEnum.EXPIRED)) { // Potential null pointer if status is null.
        return Boolean.TRUE;
    } else {
        return Boolean.FALSE;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here if the “status” that is passed to the method is null you will get a NPE at the first statement in the method. However if we write the code like as follows it can be avoided.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//GOOD CODE
private Boolean isExpired(final StatusEnum status) {
    if (StatusEnum.EXPIRED.equals(status)) { // Move variable part as parameter to equals method.
        return Boolean.TRUE;
    } else {
        return Boolean.FALSE;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some editors like IntelliJ provide a quick fix for similar use cases. If you have object.equals(”string literal”) it can replace with “string literal”.equals(object)  and you can do the replace all on your entire code base in one go if you wish. &lt;/p&gt;
&lt;p&gt;Happy coding!!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Crave for immutable classes</title>
      <link>http://blog.sanjeevonline.com/articles/2010-11-20-Immutable-Classes/</link>
      <pubDate>Sat, 20 Nov 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-11-20-Immutable-Classes/</guid>
      <author></author>
      <description>&lt;p&gt;In the book “Effective Java”, Joshua Bloch makes this compelling recommendation :&lt;/p&gt;
&lt;p&gt;&lt;i&gt;
“Classes should be immutable unless there’s a very good reason to make them mutable….If a class cannot be made immutable, limit its mutability as much as possible.”
&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Immutable objects are objects whose data or properties cannot be changed after it is constructed. JDK has a number of immutable class like String and Integer. Immutable objects have big list of compelling positive qualities and they can greatly simplify your program. Immutable objects :&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;are simple to construct, test, and use&lt;/li&gt;
&lt;li&gt;are automatically thread-safe and have no synchronization issues&lt;/li&gt;
&lt;li&gt;do not need a copy constructor&lt;/li&gt;
&lt;li&gt;do not need an implementation of clone&lt;/li&gt;
&lt;li&gt;allow hashCode to use lazy initialization, and to cache its return value&lt;/li&gt;
&lt;li&gt;do not need to be copied defensively when used as a field&lt;/li&gt;
&lt;li&gt;make good Map keys and set elements (these objects must not change state while in the collection)&lt;/li&gt;
&lt;li&gt;have their class invariant established once upon construction, and it never needs to be checked again&lt;/li&gt;
&lt;li&gt;always have “failure atomicity” (a term used by Joshua Bloch in his book “Effective Java”) : if an immutable object throws an exception, it’s never left in an undesirable or indeterminate state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They are among the simplest and most robust kinds of classes you can possibly build in JAVA. When you create immutable classes, entire categories of problems simply disappear.&lt;/p&gt;
&lt;p&gt;Make a class immutable by following these guidelines :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ensure the class cannot be overridden - make the class final, or use static factories and keep constructors private&lt;/li&gt;
&lt;li&gt;make fields private and final&lt;/li&gt;
&lt;li&gt;force callers to construct an object completely in a single step, instead of using a no-argument constructor combined with subsequent calls to setXXX methods (that is, avoid the Java Beans convention)&lt;/li&gt;
&lt;li&gt;do not provide any methods which can change the state of the object in any way - not just setXXX methods, but any method which can change state&lt;/li&gt;
&lt;li&gt;if the class has any mutable object fields, then they must be defensively copied when passed between the class and its caller&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example. Please go through the comments that are there in the code to understand the concept.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package com.javagyan.examples;

import java.util.Date;

/**
* Planet is an immutable class, since there is no way to change its state after construction.
*/
public final class Planet {

  public Planet (double aMass, String aName, Date aDateOfDiscovery) {
     fMass = aMass;
     fName = aName;
     //make a private copy of aDateOfDiscovery
     //this is the only way to keep the fDateOfDiscovery
     //field private, and shields this class from any changes that 
     //the caller may make to the original aDateOfDiscovery object
     fDateOfDiscovery = new Date(aDateOfDiscovery.getTime());
  }

  /**
  * Returns a primitive value.
  *
  * The caller can do whatever they want with the return value, without 
  * affecting the internals of this class. Why? Because this is a primitive 
  * value. The caller sees its &amp;quot;own&amp;quot; double that simply has the
  * same value as fMass.
  * @return double
  */
  public double getMass() {
    return fMass;
  }

  /**
  * Returns an immutable object.
  *
  * The caller gets a direct reference to the internal field. But this is not 
  * dangerous, since String is immutable and cannot be changed.
 * @return String
  */
  public String getName() {
    return fName;
  }

//  /**
//  * Returns a mutable object - likely bad style.
//  *
//  * The caller gets a direct reference to the internal field. This is usually dangerous, 
//  * since the Date object state can be changed both by this class and its caller.
//  * That is, this class is no longer in complete control of fDate.
//  */
//  public Date getDateOfDiscovery() {
//    return fDateOfDiscovery;
//  }

  /**
  * Returns a mutable object - good style.
  * 
  * Returns a defensive copy of the field.
  * The caller of this method can do anything they want with the
  * returned Date object, without affecting the internals of this
  * class in any way. Why? Because they do not have a reference to 
  * fDate. Rather, they are playing with a second Date that initially has the 
  * same data as fDate.
 * @return Date
  */
  public Date getDateOfDiscovery() {
    return new Date(fDateOfDiscovery.getTime());
  }

  // PRIVATE //

  /**
  * Final primitive data is always immutable.
  */
  private final double fMass;

  /**
  * An immutable object field. (String objects never change state.)
  */
  private final String fName;

  /**
  * A mutable object field. In this case, the state of this mutable field
  * is to be changed only by this class. (In other cases, it makes perfect
  * sense to allow the state of a field to be changed outside the native
  * class; this is the case when a field acts as a &amp;quot;pointer&amp;quot; to an object
  * created elsewhere.)
  */
  private final Date fDateOfDiscovery;
}&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Ajax primer</title>
      <link>http://blog.sanjeevonline.com/articles/2010-11-18-Ajax-Primer/</link>
      <pubDate>Thu, 18 Nov 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-11-18-Ajax-Primer/</guid>
      <author></author>
      <description>&lt;p&gt;The term Ajax has come to represent a broad group of web technologies that can be used to implement a web application that communicates with a server in the background, without interfering with the current state of the page. In the article that coined the term Ajax, Jesse James Garrett explained that the following technologies are incorporated:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML (or XHTML) and CSS for presentation&lt;/li&gt;
&lt;li&gt;The Document Object Model (DOM) for dynamic display of and interaction with data&lt;/li&gt;
&lt;li&gt;XML for the interchange of data, and XSLT for its manipulation&lt;/li&gt;
&lt;li&gt;The XMLHttpRequest object for asynchronous communication&lt;/li&gt;
&lt;li&gt;JavaScript to bring these technologies together&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since then, however, there have been a number of developments in the technologies used in an Ajax application, and the definition of the term Ajax. In particular, it has been noted that JavaScript is not the only client-side scripting language that can be used for implementing an Ajax application; other languages such as VBScript are also capable of the required functionality. JavaScript is the most popular language for Ajax programming due to its inclusion in and compatibility with the majority of modern web browsers. Also, XML is not required for data interchange and therefore XSLT is not required for the manipulation of data. JavaScript Object Notation (JSON) is often used as an alternative format for data interchange, although other formats such as pre-formatted HTML or plain text can also be used.&lt;/p&gt;
&lt;p&gt;This presentation shall provide you an overview of AJAX and understanding of all the necessary building blocks of an AJAX application.&lt;/p&gt;
&lt;iframe src=&quot;http://docs.google.com/presentation/d/1rcoPDHnhebSyEJXrhIRRXeqBp2ICKFYusOG5NcSefSo/embed?start=false&amp;loop=false&amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;500&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
</description>
    </item>
    <item>
      <title>Use PMD - Programming Mistake Detector?</title>
      <link>http://blog.sanjeevonline.com/articles/2010-10-30-Use-PMD-ProgrammingMistakeDetector/</link>
      <pubDate>Sat, 30 Oct 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-10-30-Use-PMD-ProgrammingMistakeDetector/</guid>
      <author></author>
      <description>&lt;h3&gt;About PMD&lt;/h3&gt;

&lt;p&gt;How do you ensure that your code follows standard programming principles? For most Java development projects going on these days the answer would be to use “PMD”. It is aiming towards becoming a de-facto tool for analyzing the source code and is being used by more and more Java applications everyday. &lt;/p&gt;
&lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: There are a lot many tools that PMD competes with i.e Checkstyle, FindBugs, Hammurapi, Soot, Squale etc. However exploring capabilities of these tools(other than PMD) are out of scope of this article.&lt;/p&gt;
&lt;p&gt;PMD is a static rule set based Java source code analyzer that identifies potential problems in the code like:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Possible bugs - empty try/catch/finally/switch statements&lt;/li&gt;
&lt;li&gt;Dead code - unused local variables, parameters and private methods&lt;/li&gt;
&lt;li&gt;Suboptimal code - wasteful String/StringBuffer usage&lt;/li&gt;
&lt;li&gt;Overcomplicated expressions - unnecessary if statements, for loops that could be while loops&lt;/li&gt;
&lt;li&gt;Duplicate code - copied/pasted code means copied/pasted bugs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can &lt;a href=&quot;http://sourceforge.net/project/showfiles.php?group_id=56262&quot;&gt;download everything from here&lt;/a&gt;, and you can get an overview of all the rules at the &lt;a href=&quot;http://pmd.sourceforge.net/rules/index.html&quot;&gt;rulesets index page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PMD is integrated with JDeveloper, Eclipse, JEdit, JBuilder, BlueJ, CodeGuide, NetBeans/Sun Java Studio Enterprise/Creator, IntelliJ IDEA, TextPad, Maven, Ant, Gel, JCreator, and Emacs.&lt;/p&gt;
&lt;h3&gt;Instructions for configuring PMD for Eclipse&lt;/h3&gt;


&lt;p&gt;Let me walk you through the steps required to quickly configure it with your Eclipse installation. It works like a breeze.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start Eclipse.&lt;/li&gt;
&lt;li&gt;Start the installation procedure : select the Help&amp;gt;Software Updates&amp;gt;Find and Install… menu item.&lt;/li&gt;
&lt;li&gt;Select “Search for new features to install” option and click Next.&lt;/li&gt;
&lt;li&gt;Click New Remote Site…&lt;/li&gt;
&lt;li&gt;Give a name (ie PMD Eclipse Site), enter the URL &lt;a href=&quot;http://pmd.sourceforge.net/eclipse&quot;&gt;http://pmd.sourceforge.net/eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select this new site in the Sites to include in search list and click Next.&lt;/li&gt;
&lt;li&gt;Select PMD for Eclipse 3 and Apache Xerces in the “Select the features to install” list and click Next.&lt;/li&gt;
&lt;li&gt;Accept the terms of the license agreements and click Next.&lt;/li&gt;
&lt;li&gt;Verify that the install location is your Eclipse installation directory, otherwise select the correct one, click Finish.&lt;/li&gt;
&lt;li&gt;A warning appear telling the feature is not signed. Ignore and click Install to continue.&lt;/li&gt;
&lt;li&gt;Accept to restart the workbench to load PMD into the workbench.
Eclipse is restarted and a PMD welcome page is displayed : the plugin is correctly installed. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Writing custom rules&lt;/h3&gt;

&lt;p&gt;It is interesting and important to note that you can write your custom rules. Writing PMD rules is cool because you don’t have to wait for PMD team to get around to implementing feature requests. Following are the two approaches to write custom rules.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write a rule using Java&lt;/li&gt;
&lt;li&gt;Write an XPath expression
More details about each of these approaches can be found at &lt;a href=&quot;http://pmd.sourceforge.net/howtowritearule.html&quot;&gt;sourceforge&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy coding.. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Package by feature not layer</title>
      <link>http://blog.sanjeevonline.com/articles/2010-10-30-Package-By-Features/</link>
      <pubDate>Wed, 20 Oct 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-10-30-Package-By-Features/</guid>
      <author></author>
      <description>&lt;p&gt;The first question in building an application is “How do I divide it up into packages?”. For typical business applications, there seems to be two ways of answering this question.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Package by feature&lt;/li&gt;
&lt;li&gt;Package by layer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my experience, the package-by-feature style seems to be the superior of the two. Here are some of the reasoning:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Higher Modularity&lt;/b&gt;: As mentioned above, only package-by-feature has packages with high cohesion, high modularity, and low coupling between packages.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Easier Code Navigation&lt;/b&gt;: Maintenance programmers need to do a lot less searching for items, since all items needed for a given task are usually in the same directory. Some tools that encourage package-by-layer use package naming conventions to ease the problem of tedious code navigation. However, package-by-feature transcends the need for such conventions in the first place, by greatly reducing the need to navigate between directories.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Higher Level of Abstraction&lt;/b&gt;: Staying at a high level of abstraction is one of programming’s guiding principles of lasting value. It makes it easier to think about a problem, and emphasizes fundamental services over implementation details. As a direct benefit of being at a high level of abstraction, the application becomes more self-documenting : the overall size of the application is communicated by the number of packages, and the basic features are communicated by the package names. The fundamental flaw with package-by-layer style, on the other hand, is that it puts implementation details ahead of high level abstractions - which is backwards.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Separates Both Features and Layers&lt;/b&gt;: The package-by-feature style still honors the idea of separating layers, but that separation is implemented using separate classes. The package-by-layer style, on the other hand, implements that separation using both separate classes and separate packages, which does not seem necessary or desirable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Minimizes Scope&lt;/b&gt;: Minimizing scope is another guiding principle of lasting value. Here, package-by-feature allows some classes to decrease their scope from public to package-private. This is a significant change, and will help to minimize ripple effects. The package-by-layer style, on the other hand, effectively abandons package-private scope, and forces you to implement nearly all items as public. This is a fundamental flaw, since it doesn’t allow you to minimize ripple effects by keeping secrets.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Better Growth Style&lt;/b&gt;: In the package-by-feature style, the number of classes within each package remains limited to the items related to a specific feature. If a package becomes too large, it may be refactored in a natural way into two or more packages. The package-by-layer style, on the other hand, is monolithic. As an application grows in size, the number of packages remains roughly the same, while the number of classes in each package will increase without bound.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Credits &amp;amp; References&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javagyan.com/articles/packagebyfeaturenotlayer&quot;&gt;Java Gyan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Beware of floating point numbers</title>
      <link>http://blog.sanjeevonline.com/articles/2010-10-20-Beware-Of-Floating-Points/</link>
      <pubDate>Wed, 20 Oct 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-10-20-Beware-Of-Floating-Points/</guid>
      <author></author>
      <description>&lt;p&gt;Outside of a scientific or engineering context, the use of float and double (and the corresponding wrapper classes Float and Double ) should likely be avoided. The fundamental problem is that rounding errors will always occur when using these data types - they are unavoidable.&lt;/p&gt;
&lt;p&gt;In a typical business application, using float and double to represent money values is dangerous, because of these rounding issues. Instead, BigDecimal should usually be used to represent money. It is also a common practice to have utility classes like “MonetaryAmount.java” that are wrappers over “BigDecimal” class of the JDK and that provides helper methods and functionality as needed by the business application.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;From an IBM article on this topic :&lt;/p&gt;
&lt;p&gt;&lt;i&gt;
“…binary floating-point arithmetic should not be used for financial, commercial, and user-centric applications or web services because the decimal data used in these applications cannot be represented exactly using binary floating-point.”
&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;From an article by Brian Goetz :&lt;/p&gt;
&lt;p&gt;&lt;i&gt;
“…it is a bad idea to use floating point to try to represent exact quantities like monetary amounts. Using floating point for dollars-and-cents calculations is a recipe for disaster. Floating point numbers are best reserved for values such as measurements, whose values are fundamentally inexact to begin with.” 
&lt;/i&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Use final liberally. Please do.</title>
      <link>http://blog.sanjeevonline.com/articles/2010-09-19-Use-Final-Liberally/</link>
      <pubDate>Sun, 19 Sep 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-09-19-Use-Final-Liberally/</guid>
      <author></author>
      <description>&lt;p&gt;Use the final keyword liberally to communicate your intent. The final keyword has more than one meaning :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a final class cannot be extended&lt;/li&gt;
&lt;li&gt;a final method cannot be overridden&lt;/li&gt;
&lt;li&gt;final fields, parameters, and local variables cannot change their value once set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the last case, “value” for primitives is understood in the usual sense, while “value” for objects means the object’s identity, not its state. Once the identity of a final object reference is set, it can still change its state, but not its identity. Declaring primitive fields as final automatically ensures thread-safety for that field.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Some habitually declare parameters as final, since this almost always is the desired behaviour. Others find this verbose, and of little real benefit.&lt;/p&gt;
&lt;p&gt;Consistently using final with local variables (when appropriate) can be useful as well. It brings attention to the non-final local variables, which usually have more logic associated with them (for example, result variables, accumulators, loop variables). Many find this verbose. A reasonable approach is to use final for local variables only if there is at least one non-final local variable in the method ; this serves to quickly distinguish the non-final local variables from the others.&lt;/p&gt;
&lt;p&gt;Using final :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clearly communicates your intent&lt;/li&gt;
&lt;li&gt;allows the compiler and virtual machine to perform minor optimizations&lt;/li&gt;
&lt;li&gt;clearly flags items which are simpler in behavior - final says,  “If you are looking for complexity, you won’t find it here.”&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Overridable methods need special care</title>
      <link>http://blog.sanjeevonline.com/articles/2010-08-29-Overiride-Carefully/</link>
      <pubDate>Sun, 29  Aug 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-08-29-Overiride-Carefully/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;b&gt;Allowing a method to be overridden should always be done intentionally, not by accident&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;Any method which is not private, static, or final can be overridden. Over-ridable methods, and any methods which call them, represent unusual places in your code, to which special attention must be paid. This is because sub-classing violates encapsulation, in the sense that it is possible for a subclass to break its superclass’s contract. If you do not intend a method to be overridden, then you should declare it as private, static, or final.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;When you do override a method, you should use the @Override annotation. This allows the compiler to verify that the method is indeed a valid override of an existing method. For example, your implementations of toString, equals, and hashCode should always use @Override in the method header. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Prefer composition over inheritance</title>
      <link>http://blog.sanjeevonline.com/articles/2010-08-09-Composition-Inheritance/</link>
      <pubDate>Sat, 07  Aug 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-08-09-Composition-Inheritance/</guid>
      <author></author>
      <description>&lt;p&gt;Trust me on this one, I have learnt it the hard way. To start with lets start with the understanding of the terms composition and inheritance.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Composition&lt;ul&gt;
&lt;li&gt;Functionality of an object is made up of an aggregate of different classes&lt;/li&gt;
&lt;li&gt;In practice, this means holding a pointer to another class to which work is deferred&lt;/li&gt;
&lt;li&gt;Collaboration is implemented simply by forwarding all calls to an object field&lt;/li&gt;
&lt;li&gt;It has no dependence on implementation details of the object field&lt;/li&gt;
&lt;li&gt;It is more flexible, since it is defined dynamically at run-time, not statically at compile-time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Inheritance&lt;ul&gt;
&lt;li&gt;Functionality of an object is made up of it’s own functionality plus functionality from its parent classes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Sub-classing or inheritance has the following issues :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It violates encapsulation, since the implementations of the superclass and subclass become tightly coupled&lt;/li&gt;
&lt;li&gt;new methods added to the superclass can break the subclass&lt;/li&gt;
&lt;li&gt;superclass and subclass need to evolve in parallel&lt;/li&gt;
&lt;li&gt;designing a class so that it may be safely extended takes extra work - extending a class not explicitly designed for such use is risky&lt;/li&gt;
&lt;li&gt;different packages are often under the control of different programmers - extending a class in a different package is risky&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A common exception is the template method design pattern. There, the safest style is to make all items in the abstract base class final, except for the single abstract method which needs to be implemented by the subclass.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>History, heritage and beauty of Italy</title>
      <link>http://blog.sanjeevonline.com/articles/2010-07-07-Rome-Florence-Venice-Italy/</link>
      <pubDate>Wed, 07 Jul 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-07-07-Rome-Florence-Venice-Italy/</guid>
      <author></author>
      <description>&lt;p&gt;After a long wait for summers and good holiday deals, we finalized our itinerary during last week of May. The trip was planned from 19th June till 26th June. This time we chose to stay at camping sites at the out skirts of Rome city centre and now I can say that it was a good decision as the camping was fun and we always had something to do after returning from our day trips from Rome and other places. &lt;/p&gt;
&lt;p&gt;I found Rome very close and comparable to our India, particularly Delhi, in a number of ways. The weather, the people, their hospitality, familiar and pleasant smell of the soil after it rained, helping and fun loving nature of people, houses with roof top television antennas and scooters everywhere were some of the few similarities that we observed. We explored the rich history of Rome for three days followed by an afternoon at Ostia Antica beach. The weather was at our side most of the times except for the first day when it rained throughout the day and last day when we nearly fainted due the hot sunny day.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Colosseum was the best place to see in Rome closely followed by Vatican City, Trevi fountain, Spanish steps and a few piazzas (Rectangular open areas in the city usually surrounded by restaurants and shops. Nice places to hang out with friends and observe city culture).&lt;/p&gt;
&lt;p&gt;Next we went to Florence and just after checking in our hotel we went to see the leaning tower of Pisa. It was worth the visit and the white marble used in its construction reminded me of the Taj Mahal. We returned to Florence in the evening and kept roaming around in the city till late night while Ranit was having a nap in his Pram. It was fun. Florence has some very huge and beautiful old churches that we kept looking at in awe.&lt;/p&gt;
&lt;p&gt;Final place on our trip was Venice and we had spared around 3 days for this place. I am not exaggerating when I say that Venice was the most beautiful place that I have seen till now. Rajni seconds this feeling. We spent a lot of time on the boats. We also saw the making of Murano glass on Murano island and Rajni even bought a jewellery set as a souvenir from Murano. We walked through the streets deep inside the Venice city and thoroughly enjoyed our time there. Ice lollies proved a lot effective in beating the heat on venice during those sunny days. There is so much about the city to talk and write about; Some other time perhaps.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A day trip to Dinant, belgium</title>
      <link>http://blog.sanjeevonline.com/articles/2010-06-07-Dinant-Belgium/</link>
      <pubDate>Mon, 07 Jun 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-06-07-Dinant-Belgium/</guid>
      <author></author>
      <description>&lt;p&gt;Last week finally we got the opportunity to visit Dinant, which is a small town known for its natural beauty and some terrible historic events that happened there during late 1800s. Another relatively lesser know fact about this place is that Adolphe Sax, inventor of the saxophone was also born and brought up in the vicinity of Citadel fort, which is a prominent  tourist attraction in this region of Belgium.&lt;/p&gt;
&lt;p&gt;It was a day trip. We left Brussels at around 10 AM and reached Dinant within an hour. Weather was very nice and sunny on that day. We started our tour by clicking some snaps of Citadel fort which was just about 400 meters from the station. Then we took a cable car tide to the top of the fort and spent a few hours there on the hill. Ranit had some great time on the swings in the play area for kids while we enjoyed the guided tour of the citadel fort. After getting down from Citadel we went to see the house of Adolphe Sax which still displays some of the original Saxophones that he made. We felt privileged for having got an opportunity to get some snaps clicked with the statue of Adolphe Sax.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I bought some beers and snacks from a grocery store and then spent some time on the river side while enjoying the Beer and Sandwiches that Rajni had prepared and brought from home. &lt;/p&gt;
&lt;p&gt;It was overall a relaxed tour where we didn’t sweat ourselves too much and enjoyed it on a slow pace without having to run from one site to the other. &lt;/p&gt;
&lt;p&gt;There are a few other scenic places, châteaus and a small beautiful village in that area, that we have saved for our next trip :-).&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A trip to the city of fashion, Paris</title>
      <link>http://blog.sanjeevonline.com/articles/2010-05-30-Paris-France/</link>
      <pubDate>Sun, 30 May 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-05-30-Paris-France/</guid>
      <author></author>
      <description>&lt;p&gt;Finally its a weekend and we have no plans except for going to the fancy dress show in Ranit’s school. So I have some time to pen down some moments from our Paris trip that we did earlier this month. &lt;/p&gt;
&lt;p&gt;We had a lot of expectations from our trip when we left for Paris from Brussels. It was the city that I had thought about visiting at least once in this life while I was in junior school and when I first saw that movie “An evening in Paris” starring Shammi Kapoor. Of-course I am lying. But yes it was indeed a place where I wanted to be at least once and after our 5 days stay in Paris Trust me it is worth visiting at least once in your life. So if you happen to be in Europe for sometime for work or anything like that, DON’T MISS IT.&lt;/p&gt;
&lt;p&gt;We had got a good deal for staying in Paris for 4 nights. It was actually not in Paris but about 20 km out of it. However, the city is so well connected that you hardly realize it.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We reached Paris on 13th May at around 12:30 PM. From there we directly went to our hotel, checked in and then left for a quick city tour. That  day we managed to see Defense Arc, Champs-Elysees, Arc De Triomphe and Concord. It was getting slightly darker and we were planning to call it a day. Just then we got our first glimpse of Eiffel Tower and we were fresh and energetic again and decided to see Eiffel from close before leaving for our hotel. In about 20 minutes and after changing couple of Metros we were there, right next to the Eiffel tower. It was stunningly beautiful. It was glowing in golden color with some white and purple lights twinkling all over it. We kept clicking photographs till both pairs of our batteries were dead. We had no option but to call it a day and leave for the hotel and because Ranit was also with us and it was already around 12 midnight it was a good decision.&lt;/p&gt;
&lt;p&gt;Next day we spent at Disneyland, where Ranit was having all the fun and we were enjoying the excitement and spark in his eyes that he was having while waiting for his turn on the rides. Another good day gone.&lt;/p&gt;
&lt;p&gt;Third day we was a few more beautiful places  like Montmatre, NotreDam, Bercy park and the wooden walking bridge over the Siene river of Paris. Also we couldn’t have enough of Eiffel tower on our first day in Paris, so decided to go there again and this time we spent some 2 hrs or more in the queue to get a ride to the top of Eiffel. Once  we were on the second floor of Eiffel and looked at the Paris city from there, we realized that it was worth the wait in the queue. We could not go to the top floor as that was closed for some maintenance :( probably for next time.&lt;/p&gt;
&lt;p&gt;On the forth day we admired the history and art crafted on the walls (&amp;amp; Roofs)of Chateau De Versailles. Later we spent a lot of time in the beautiful gardens around the palace.&lt;/p&gt;
&lt;p&gt;Now we were at our last day in Paris but the good news was that we had the full day in hand as our bus was leaving from Paris at 6 in the evening. On this day we visited Chateau De Vincennes followed by the Parc Floral de Paris. It is relatively lesser known park but we enjoyed the most here. It was very beautiful and has some nice scenic spots to click some decent snaps.   If you are with kids they will love it. We also saw St. Marten canal and Paris De Nord on this day before heading towards our bus. &lt;/p&gt;
&lt;p&gt;And just before we were to board our bus for Brussels and when I was feeling happy about being able to accomplish our trip within our allocated budget, Rajni started bargaining for a Perfume form Paris. Eventually we overshot our allocated budget by some 100 € :-(.&lt;/p&gt;
&lt;p&gt;PS: I would like to thank this little french guy who helped us in reaching Champs-Elysees after we boarded the wrong bus and realized it half an hour later. It was difficult for him to make us understand(French Only Guy) the route so he came out of his way to make sure that we reach our destination safely . I learnt that language, nationality and color of skin is not a barrier if you are committed to help others, anywhere in this world.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>London, England</title>
      <link>http://blog.sanjeevonline.com/articles/2010-05-20-London-England/</link>
      <pubDate>Wed, 05 May 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-05-20-London-England/</guid>
      <author></author>
      <description>&lt;p&gt;It has been more than a month since our London trip ended but the memories of the trip are still so fresh as if it was Yesterday. So before my recollections of the trip fade away, I am putting it down in my travelog. &lt;/p&gt;
&lt;p&gt;So the trip started with a very positive news from London about Simi &amp;amp; Rohit (My sis-in-law) getting blessed with a baby boy. I was excited to join them in London during these happy moments. Rajni and Ranit were already in London from past one month so seeing them after so long was itself a great feeling that I was looking forward to. &lt;/p&gt;
&lt;p&gt;As usual we didn’t have a very well planned agenda for our 7 days of London sight seeing trips, as I was relying completely on Rohit for that. Thanks to Rohit for planning all our trips perfectly so that we can see as much of London as possible without exerting ourselves to death :-). It worked out very well for us and we will cherish the memories from that trip forever.  &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So on our first day we went to see the Kingston Riverside where we spent most of our time hanging out along the river side on that sunny day. While I was enjoying my beer, Rajni ensured that kids don’t jump into the river while feeding ducks :-). Afterall they are Indian kids so anything is possible. Specially Ranit is quite capable of doing such stuff. It was overall a relaxed day where we warmed up ourselves for the rest of our trip.  One thing that I remember from this day was these two old women, probably in their late 80’s, sitting on a bench under the most beautiful tree on the riverside. That was the perfect place to click some snaps, so we decided to wait for sometime for these ladies to move. We waited for some 4 hrs and eventually gave up the hope to get a snap in that area. These women were like glued together with the bench and sat there throughout the day. For my satisfaction I went a little closer and was relieved to see that both were alive.&lt;/p&gt;
&lt;p&gt;On our second day we saw a lot many popular places of London like O2 Arena, Greenwich Observatory, CuttySark and Canary Wharf. Rajni liked the skyscrapers rising from the Thames river in Canary Wharf and Ranit and I liked Greenwich Observatory for its greenery and huge parks and play areas for kids. &lt;/p&gt;
&lt;p&gt;Third day was Rajni’s birthday and was reserved for the best sites of London. That day we visited London Bridge, Big Ben, London Eye, Footbridge on Thames and the famous Tate Art Gallery. London looked very beautiful and tiny from within the LondonEye capsule.  We unanimously agree for London Eye to be our favorite from this day.&lt;/p&gt;
&lt;p&gt;We were a little tired so decided to rest on the forth day. We also visited Usha Didi’s house on that day where Ranit got a foot scooter as a gift. He was so exited and possessive about it that he refused to open it fearing that Gungun (Simi’s daughter) will take it.&lt;/p&gt;
&lt;p&gt;Fifth day we saw Buckingham Palace, Hyde Park, Saint James Park, Madam Tussuad, Trafalgar square and Oxford street. In Madam Tussuad I got the opportunity to pose with, hold and kiss the likes of Julia Roberts and Angelina Joli while Rajni was hanging out with Johnny Depp &amp;amp; Brad pit. Ranit found a hiding place near the legs of Marilyn Monroe. &lt;/p&gt;
&lt;p&gt;Sixth day was the most special one when Rohit drove us to Brighton beach which was some 60 miles from their house. Gungun was also with us on this trip. It was a nice sunny day again like on all other days during our trip. This was kind-of rare during that part of the year. We spent full day on this pebbled beach and it was so much fun. We spent some time playing some games in this casino-for-kids kind of thing. Gungun managed to win a few gifts from the games which were later distributed between Gungun and Ranit. Rohit also demonstrated his skills by winning us couple of toy dolphins by beating all his competitors in the fish race. He did that not once but twice and second time I was also competing with him. He won by a second or two. I was at second position.&lt;/p&gt;
&lt;p&gt;Seventh day we spent at home. Usha Didi and Jija ji also joined us at Rohit’s house and in the evening Rohit stuffed us with a lot of chilled beer and delicious pork which he cooked himself.&lt;/p&gt;
&lt;p&gt;Gungun, Simi and Rohit were awesome hosts throughout our stay in London and we thoroughly enjoyed each and every minute that we spent there.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Day trip to the largest city of Netherlands - Amsterdam</title>
      <link>http://blog.sanjeevonline.com/articles/2010-01-01-Amsterdam-Netherlands/</link>
      <pubDate>Fri, 01 Jan 2010 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2010-01-01-Amsterdam-Netherlands/</guid>
      <author></author>
      <description>&lt;p&gt;The city of glamour, weed and fun, Amsterdam, was the last site that was on our agenda. Unlike Arun’s basic nature, he was very accommodating :-) and agreed to almost all our plans and gave up giving anymore advices for site seeing. We all surrendered to Rajni’s agenda of feeding grains to pigeons on dam square and get some snaps clicked on the giant “ I AMSTERDAM” structure, followed by a tour of famous red light district of Amsterdam.&lt;/p&gt;
&lt;p&gt;After spending sometime at Dam Square we moved towards the Bloeman market which is known for wide variety of flowers and souvenirs items. We bought some small wooden shoes, small windmill replicas and famous cheese of Holland.&lt;/p&gt;
&lt;p&gt;After that we started asking people about the “I AMSTERDAM” structure. Nobody seemed to knew about any such thing in Amsterdam. Eventually we got some hint about it that it was near “Rijks” museum. On the way to the Rijks museum we passed through the famous Vondel Park and clicked some snaps there. It was freezing cold in the park as it was open from all sides. We were surprised to see some people jogging there in shots and plane track suits. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;After asking a few more people we finally made it to the museum and the “I AMSTERDAM” place. &lt;/p&gt;
&lt;p&gt;We clicked some snaps there and after Rajni was satisfied, we moved ahead to see the red light area of Amsterdam. It started raining on the way and we were carrying only one umbrella which was obviously not enough to accommodate all of us.  We were also very hungry so decided to get into some restaurant for some snacks and stay there until it stops raining.
It was all non-vegetarian restaurant, so Anagha did not have anything accept for few biscuits with Mayonnaise. She is too sweet to complain about anything.&lt;/p&gt;
&lt;p&gt;Eventually we all reached the place that we all wanted to see and that was Red Light district. We didn’t need to ask anyone about this place as it was all too obvious as soon as we reached there. Thankfully, Ranit was sleeping in his pram so I was spared from answering all those questions that he would have asked. We spend some half an hour in those streets and then started back for Amsterdam railway station from where we had to catch our train for Brussels.&lt;/p&gt;
&lt;p&gt;It was the most fun filling and full filling trip that we have had in Europe and we highly appreciate Arun and Anagha for being the perfect host. &lt;/p&gt;
&lt;p&gt;I am looking forward for some more site seeing tours of Nederlands during tulip season. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>The windmills of Kinderdijk, Netherlands</title>
      <link>http://blog.sanjeevonline.com/articles/2009-12-31-Kinderdijk-Netherlands/</link>
      <pubDate>Thu, 31 Dec 2009 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2009-12-31-Kinderdijk-Netherlands/</guid>
      <author></author>
      <description>&lt;p&gt;We had heard a lot about Netherlands wind mills that were built more than two centuries ago and are still into existence.For many centuries these windmills played an important role in the drainage &amp;amp; subsequent reclamation of the lands in NL. These windmills were already on our agenda for this weekend. &lt;/p&gt;
&lt;p&gt;Arun checked the bus and train route and selected the best way to reach Kiderdijk. Bus was a little more convenient than train as it was the direct route. So we left for the bus stop from where we were to board the bus  number 90 for Kinderdijk. I remember the bus number because it saved us some 40 € for the travel. For some reasons, that day it was free travel on that route so we didn’t have to pay anything for our trip to Kinderdijk. Arun was excited and could hardly control his happiness when the driver told him that it was a free day. I also had a similar or may be even more intense reaction when Arun told me about it.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;After an hour and twenty minutes journey we reached Kinderdijk. From the bus stop itself we could see some windmills. The weather was very pleasant that day and it added to our pleasure. &lt;/p&gt;
&lt;p&gt;After we all used the toilet (using a single 50 cent coin) we were all set to explore and appreciate the beauty of the 19 windmills that were there. It was very scenic and calm place and spent some some quality time there and clicked some nice snaps for my photo album.&lt;/p&gt;
&lt;p&gt;After spending about couple of hours and after clicking photographs around the windmills in all possible posses like all Indians do, we wrapped up and decided to go to Rotterdam to see some more sites. Of-course we boarded the same bus route number 90. &lt;/p&gt;
&lt;p&gt;Arun suggested a few more sites that we could have visited on the same day but I didn’t feel like going anywhere as Ranit had already slept in his pram and it would have been a bit of inconvenience for him. Besides I was still awestruck after seeing the beautiful and natural windmills of Kinderdijk and didn’t want to let thyis feeling go for some more time.&lt;/p&gt;
&lt;p&gt;We realized that we had not eaten anything after the breakfast and decided to get some chicken kebabs and french fries. After spoiling the floor of kebab shop with the chicken and bread from our kebabs we decided to call it a day and started our journey for Arun’s apartment. We also had to pack our bags for next day as we had planned to see Amsterdam city and board the train for Brussels directly from there.&lt;/p&gt;
&lt;p&gt;Overall it was another wonderful day!!!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Domtoren Utrecht, Netherlands</title>
      <link>http://blog.sanjeevonline.com/articles/2009-12-30-Domtoren-Utrecht/</link>
      <pubDate>Wed, 30 Dec 2009 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2009-12-30-Domtoren-Utrecht/</guid>
      <author></author>
      <description>&lt;p&gt;We were waiting for this long weekend from quite some time and finally it came with a bang. It was quite an event full weekend and will stay in our memories for a long long time.&lt;/p&gt;
&lt;p&gt;The trip started with a little trouble as we boarded the wrong train from Brussels.  The tickets that we had were for a normal train but we boarded the super fast (Thalys) train instead. Luckily the train manager was kind enough to let us go without charging us anything for boarding that train. He could have charged us around 50 Euros for this but he didn’t want to spoil our Christmas and allowed us to continue our journey. I love Christmas, god exists :-).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since it was a thalys train it hardly took us any time to reach Rotterdam and eventually to our final destination Utrecht where Arun was already waiting for us with his Italian umbrella as it was raining. It was around 11 AM of the Christmas day.&lt;/p&gt;
&lt;p&gt;After the delicious lunch prepared by Anagha (Spicy Dum Aalu) we went out to see the tallest church Dom “Domtoren” in  Netherlands. It was hardly a few yards from Arun’s house. It was very windy and slippery outside the church but we still managed to click some snaps for our album. Thanks to Rajni’s Swiss umbrella. &lt;/p&gt;
&lt;p&gt;After we saw the church Arun suggested to walk around the city a bit and showed us a few interesting places in Utrecht. On the way he told about how Greg and he used to roam around till 4 Am in that area after they were refused entry in the pubs.&lt;/p&gt;
&lt;p&gt;Arun also told about why Nederland people are best water management experts in the word and how it is still rising to prosperity in spite of having a lot of area under the sea levels. In the back of my mind I started thinking about our Indian states like Orisa and Bihar where every year we suffer huge losses of lives and property due to floods. Why can’t we learn and implement the solutions that have been implemented successfully in Netherlands. &lt;/p&gt;
&lt;p&gt;Ranit was also having a wonderful time on the streets.  Just then it started drizzling and we decided to move back to Arun’s luxurious :-)  apartment.&lt;/p&gt;
&lt;p&gt;Arun had already planned for a daaru party on Christmas and he had to do certain arrangements for that. Ranit wanted to see his favorite movie “Hanuman Returns” for the thousandth time so we all joined him for that on you tube. Actually, I also like that movie and can watch it again and again. 
Overall it was an excellent start and we all were  very happy and excited and were looking forward for the next event which was “The daaru party”.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A day trip to Aquatopia at Antwerp, Brussels</title>
      <link>http://blog.sanjeevonline.com/articles/2009-11-30-Aquatopia-Aquarium/</link>
      <pubDate>Tue, 01 Dec 2009 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2009-11-30-Aquatopia-Aquarium/</guid>
      <author></author>
      <description>&lt;p&gt;Aquatopia is a popular educational attraction in central Antwerp, Belgium. It features a set of aquariums, along with recreations of other marine habitats, including swamps, rain forests, river deltas, and coral reefs. Aquatopia also includes a number of special exhibits covering sharks, nautilus, and mysteries of the deep.&lt;/p&gt;
&lt;p&gt;We went to see Aquatopia with Arun and Anagha who were visting us from Netherlands. It was a nice trip and Ranit was so excited after seeing so many fishes and other sea animals. Shark show was amazing and after that show Ranit kept asking that if shark can eat dad if he jumps into that water. Ranit also managed to get a Dolphin puzzle as a gift from Arun and that kept Ranit busy for quite a few days. While I am writing this Ranit is busy assembling the same Dolphin puzzle.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A walk in Brussels</title>
      <link>http://blog.sanjeevonline.com/articles/2009-11-25-Brussels-Belgium/</link>
      <pubDate>Wed, 25 Nov 2009 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://blog.sanjeevonline.com/articles/2009-11-25-Brussels-Belgium/</guid>
      <author></author>
      <description>&lt;p&gt;Arun and Anagha, our family friends, visited us in Brussels and we decided to do a little site seeing while they were around. Brussels has grown from a 10th-century fortress town to a sizeable city. It has a lot of popular places that a lot of tourists come to see.&lt;/p&gt;
&lt;p&gt;We started our site seeing from the famous Atomium which is in Hayzel and is not very from where we live in Brussels. Rajni cooked some Parathas and snacks to carry along for site seeing. Later that day we went to see this place called Grand Place which is at walking distance from our place. It was a day well spent with family and friends.&lt;/p&gt;
&lt;p&gt;Here are some pics from the tour.&lt;/p&gt;
&lt;span2&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-PJUjJY7H-5Q/UR--ouCHg5I/AAAAAAAAZYY/6RmJksypA7Q/w352-h264-p-o/P1040813.JPG&quot; &gt;&lt;/span2&gt;
&lt;span2&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-doW0wcSR15c/UR-_CgQ51OI/AAAAAAAAZZQ/4QNtJtl-ays/w345-h259-p-o/P1030536.JPG&quot;&gt;&lt;/span2&gt;
&lt;span2&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-_7_x0VNACsI/UR--4ZuJ2LI/AAAAAAAAZY4/eX_c7crLv7c/w359-h269-p-o/P1040558.JPG&quot;&gt;&lt;/span2&gt;</description>
    </item>
  </channel>
</rss>